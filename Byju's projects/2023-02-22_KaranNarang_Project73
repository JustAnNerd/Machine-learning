{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"15pzkxDsmwy4Nu5LoRygl8r5ZA7pAT8NH","timestamp":1677120996964},{"file_id":"1r4Q_TH7OnbF6uh19h-wVeUYm2nooP-U9","timestamp":1608193510463}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"LmGIEJypJecD"},"source":["### Instructions"]},{"cell_type":"markdown","metadata":{"id":"ucTA11TxJfTy"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"LW8H-_yDJf-j"},"source":["#### Goal of the Project\n","\n","This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lessons:\n","\n"," 1. Logistic Regression - Univariate Classification I\n"," \n"," 2. Logistic Regression - Univariate Classification II\n"," "]},{"cell_type":"markdown","metadata":{"id":"GNiMg-W5KlL6"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"QcWRu1mPfROj"},"source":["#### Getting Started:\n","\n","1. Click on this link to open the Colab file for this project.\n","\n","   https://colab.research.google.com/drive/15pzkxDsmwy4Nu5LoRygl8r5ZA7pAT8NH\n","\n","2. Create a duplicate copy of the Colab file as described below.\n","\n","  - Click on the **File menu**. A new drop-down list will appear.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/0_file_menu.png' width=500>\n","\n","  - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/1_create_colab_duplicate_copy.png' width=500>\n","\n","3. After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_Project73** format.\n","\n","4. Now, write your code in the prescribed code cells.\n"]},{"cell_type":"markdown","metadata":{"id":"kDoR9wsofSmI"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"maAiarpbKl1h"},"source":["### Problem Statement\n","\n","A researcher is interested in assessing how different factors such as GRE (Graduate Record Exam scores), GPA (grade point average), and prestige of the undergraduate institution (RANK) affect admission into graduate school. \n","\n","Build a Logistic Regression model to help him analyse the impact of GRE scores on admissions."]},{"cell_type":"markdown","metadata":{"id":"bX0oDkQwVaxY"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"8Nwq440AVba9"},"source":["### List of Activities\n","\n","**Activity 1:** Analysing the Dataset\n","\n","  \n","**Activity 2:**  Normalise the Dataset\n","\n","**Activity 3:**  Calculate the Sigmoid Output\n","\n","**Activity 4:** Model Prediction\n","\n","**Activity 5:** Model Evaluation"]},{"cell_type":"markdown","metadata":{"id":"VMstt1j0Vhjp"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"a25NHqeGViL3"},"source":["#### Activity 1:  Analysing the Dataset\n","\n","\n","\n","You are given with the UCI dataset on college admissions. This dataset consists of the following columns:\n","\n","|Field|Description|\n","|---:|:---|\n","|admit|Binary; states whether the student is admitted or not|\n","|gre|GRE score of the student|\n","|gpa|GPA of the student on a $4$ point scale|\n","|rank|Rank of student's postgraduate institution|\n","\n","Print the first five rows of the dataset. \n","\n"," **Dataset Link:** https://curriculum.whitehatjr.com/APT+Asset/APT+projects+datasets/binary.csv"]},{"cell_type":"code","metadata":{"id":"sNtMW1CCLuur"},"source":["# Import the required modules and load the dataset\n","import pandas as pd\n","import numpy as np\n","df = pd.read_csv('https://curriculum.whitehatjr.com/APT+Asset/APT+projects+datasets/binary.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q5eTPPUbN2E5","executionInfo":{"status":"ok","timestamp":1677120355464,"user_tz":360,"elapsed":16,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"d1e0b4f1-fa71-430e-978f-9b1e3fa5608a","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Print the first five rows of Dataframe.\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0  admit  gre   gpa  rank\n","0           0      0  380  3.61     3\n","1           1      1  660  3.67     3\n","2           2      1  800  4.00     1\n","3           3      1  640  3.19     4\n","4           4      0  520  2.93     4"],"text/html":["\n","  <div id=\"df-f011c686-6349-4a0d-9fd4-419ef6cfdb34\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>admit</th>\n","      <th>gre</th>\n","      <th>gpa</th>\n","      <th>rank</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>380</td>\n","      <td>3.61</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>660</td>\n","      <td>3.67</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>800</td>\n","      <td>4.00</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>640</td>\n","      <td>3.19</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>520</td>\n","      <td>2.93</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f011c686-6349-4a0d-9fd4-419ef6cfdb34')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f011c686-6349-4a0d-9fd4-419ef6cfdb34 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f011c686-6349-4a0d-9fd4-419ef6cfdb34');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"fnbpZifUf8YJ"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"SEfsfeZ8YVY-"},"source":["#### Activity 2:  Normalise the Dataset\n","\n"," Perform the following tasks:\n","\n"," - Get the descriptive statistics for the `gre` column.\n","\n"," - Normalise the `gre` column values by calculating their $Z$-scores (or standard scaler). \n","\n"]},{"cell_type":"code","metadata":{"id":"FGWtos59OzFq","executionInfo":{"status":"ok","timestamp":1677120483273,"user_tz":360,"elapsed":1549,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"5b3ccb71-e43e-462d-a210-80b389171420","colab":{"base_uri":"https://localhost:8080/","height":320}},"source":["# Get the descriptive statistics for the 'gre' column. \n","import matplotlib.pyplot as plt\n","\n","df['gre'].describe()\n"," # Plot a histogram to show the distribution of values for 'gre' column \n","plt.figure(figsize=(15, 5))\n","plt.hist(df['gre'], bins='sturges')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"CirAHf7wPDjH","executionInfo":{"status":"ok","timestamp":1677120583327,"user_tz":360,"elapsed":394,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"d94cd4a9-fe12-4a68-841f-db53bd33d679","colab":{"base_uri":"https://localhost:8080/","height":348}},"source":["# Normalise the 'gre' column values using the standard scaler method.\n","def standard_scaler(series):\n","  new_series = (series - series.mean()) / series.std()\n","  return new_series\n","gre_scaled = standard_scaler(df['gre'])\n","# Get the descriptive statistics for the normalised 'gre' column. \n","gre_scaled.describe()\n","\n","# Plot a histogram to show the distribution of values for normalised 'gre' column \n","plt.figure(figsize = (12, 4), dpi = 96)\n","plt.hist(gre_scaled, bins = 'sturges')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x384 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"l7sJSsxYf-NH"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"SxbDqn6baRkL"},"source":["#### Activity 3:  Calculate the Sigmoid Output\n","\n","1. Create a sigmoid function. \n","\n","2.  Calculate the sigmoid output for the scaled (or Normalised) GRE scores."]},{"cell_type":"code","metadata":{"id":"XXlywmuQPqbg"},"source":["# Create a sigmoid() function using the above formula.\n","def sigmoid(series):\n","  return pd.Series(1/(1+np.exp(-series)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BCWUAjGZPXkh","executionInfo":{"status":"ok","timestamp":1677120732639,"user_tz":360,"elapsed":134,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"90587fd8-0910-4d60-bda7-e8fe93522b65","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Calculate the sigmoid output for the scaled (or normalised) GRE scores.\n","gre_sigmoid = sigmoid(gre_scaled)\n","\n","# Get the descriptive statistics for the sigmoid output of normalised 'gre'. \n","gre_sigmoid.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    400.000000\n","mean       0.501370\n","std        0.210643\n","min        0.039807\n","25%        0.357539\n","50%        0.483342\n","75%        0.651556\n","max        0.862692\n","Name: gre, dtype: float64"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"XUMKKeK6bcRC"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"HPSVS9_abZD1"},"source":["#### Activity 4:  Model Prediction\n","\n","Consider the threshold probability value of 0.5. \n","\n","- Create a function that classifies the sigmoid output for the scaled  GRE scores into 0s and 1s using the threshold value of 0.5\n"]},{"cell_type":"code","metadata":{"id":"mcKU9OkwQnfH"},"source":["# Create a function 'predict()' that takes the sigmoid output and the threshold\n","# and returns a Pandas series containing the predicted values (0s and 1s) as the output.\n","def predict(sigmoid, threshold): \n","  y_pred = [1 if output>=threshold else 0 for output in sigmoid]\n","  return pd.Series(y_pred)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2ntZvNouZ4gr","executionInfo":{"status":"ok","timestamp":1677120746686,"user_tz":360,"elapsed":135,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"dc68b87f-c131-40d2-f397-164131fe651f","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Use the 'predict()' function to classify the 'sigmoid()' function outputs as 0 and 1.\n","# Consider threshold value of 0.5.\n","pred = predict(gre_sigmoid, 0.5)\n","pred.value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    203\n","1    197\n","dtype: int64"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"zFWUdZ4YgAO5"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"hZFGuMqCfjp-"},"source":["#### Activity 5:  Model Evaluation\n","\n","Evaluate the model by calculating the number of false positives and false negatives using a confusion matrix. Also print the classification report for the predicted values."]},{"cell_type":"code","metadata":{"id":"6py8MXgiRAwn","executionInfo":{"status":"ok","timestamp":1677120985271,"user_tz":360,"elapsed":174,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"13d25061-3c93-4335-ad6d-16456a881ca0","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Create a confusion matrix for the predicted values.\n","from sklearn.metrics import classification_report, confusion_matrix\n","print(confusion_matrix(df['admit'], pred))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[154 119]\n"," [ 49  78]]\n"]}]},{"cell_type":"code","metadata":{"id":"6Br2hK1wRMtv","executionInfo":{"status":"ok","timestamp":1677120991982,"user_tz":360,"elapsed":156,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"e7213744-bf6f-4fcd-a4d1-9da67555bba5","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Print the classification report for the predicted values.\n","print(classification_report(df['admit'], pred))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.76      0.56      0.65       273\n","           1       0.40      0.61      0.48       127\n","\n","    accuracy                           0.58       400\n","   macro avg       0.58      0.59      0.56       400\n","weighted avg       0.64      0.58      0.59       400\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"N6NDX4jDfvBw"},"source":["----"]},{"cell_type":"markdown","metadata":{"id":"LNA1G4VogFXh"},"source":["### Submitting the Project:\n","\n","1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>\n","\n","2. In the dialog box, make sure that '**Anyone on the Internet with this link can view**' option is selected and then click on the **Copy link** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>\n","\n","3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_Project73**) of the notebook will get copied.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>\n","\n","4. Go to your dashboard and click on the **My Projects** option.\n","   \n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>\n","\n","5. Click on the **View Project** button for the project you want to submit.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>\n","\n","6. Click on the **Submit Project Here** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>\n","\n","7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_Project73** in the URL box and then click on the **Submit** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800> "]},{"cell_type":"markdown","metadata":{"id":"Qb6mCX4TgNkC"},"source":["---"]}]}