{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1N-dDFw8zhfw7yKCrrEaN3xz8XepFnM0Z","timestamp":1673319349228},{"file_id":"1dWEN7HK_CoqLnNqGjIVQCBdBbbUb11s0","timestamp":1600868770193}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aQIDTCSIwTP3"},"source":["### Instructions"]},{"cell_type":"markdown","metadata":{"id":"F_IP6BNb3Ne1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"azReToS7wWX3"},"source":["#### Goal of the Project\n","\n","This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lessons:\n","\n"," 1. Simple linear regression III - Model Evaluation\n"," "]},{"cell_type":"markdown","metadata":{"id":"llwKuOyIwnA_"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"3VEhmLXA7yxx"},"source":["#### Getting Started:\n","\n","1. Click on this link to open the Colab file for this project.\n","\n","  https://colab.research.google.com/drive/1N-dDFw8zhfw7yKCrrEaN3xz8XepFnM0Z\n","\n","2. Create a duplicate copy of the Colab file as described below.\n","\n","  - Click on the **File menu**. A new drop-down list will appear.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/0_file_menu.png' width=500>\n","\n","  - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/1_create_colab_duplicate_copy.png' width=500>\n","\n","3. After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_Project60** format.\n","\n","4. Now, write your code in the prescribed code cells.\n"]},{"cell_type":"markdown","metadata":{"id":"0BG52SXF78fe"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"fR_SN7K6475D"},"source":["### Problem Statement\n","\n","The most important factor for an Insurance Company is to determine what premium charges must be paid by an individual. The charges depend on various factors like age, gender, income, etc. \n","\n","Build a model that is capable of predicting the insurance charges a person has to pay depending on his/her age using simple linear regression. Also, evaluate the accuracy of your model by calculating the value of error metrics such as R-squared, MSE, RMSE, and MAE.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"lN1iCMJ4Oy1N"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"L3zN-iv-wpjm"},"source":["### List of Activities\n","\n","**Activity 1:** Analysing the dataset\n","\n","  \n","**Activity 2:**  Train-Test split\n","\n","**Activity 3:**  Model Training\n","\n","**Activity 4:** Model Prediction and Evaluation\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"jLudEnlPO0FF"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lZt4yKiJwrUs"},"source":["\n","#### Activity 1:  Analysing the Dataset\n","\n","- Create a Pandas DataFrame for **Insurance** dataset using the below link. This dataset consists of following columns:\n","\n","|Field|Description|\n","|---:|:---|\n","|age|Age of primary beneficiary|\n","|sex|Insurance contractor gender, female or male|\n","|bmi|Body mass index|\n","|children|Number of children covered by health insurance/number of dependents|\n","|region|Beneficiary's residential area in the US, northeast, southeast, southwest, northwest|\n","|charges|Individual medical costs billed by health insurance|\n","\n","\n","  **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/insurance_dataset.csv\n","\n","- Print the first five rows of the dataset. Check for null values and treat them accordingly.\n","\n","- Create a regression plot with `age` on X-axis and `charges` on Y-axis to identify the relationship between these two attributes.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"6U6NaAy4WQgs","executionInfo":{"status":"ok","timestamp":1673402764022,"user_tz":360,"elapsed":1620,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"ea146809-79d1-48c5-da6c-a89b84a5057a","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Import modules\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","# Load the dataset\n","df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/insurance_dataset.csv')\n","# Dataset Link: 'https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/insurance_dataset.csv'\n","\n","# Print first five rows using head() function\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     sex     bmi  children     region      charges\n","0   18    male  33.770         1  southeast   1725.55230\n","1   28    male  33.000         3  southeast   4449.46200\n","2   33    male  22.705         0  northwest  21984.47061\n","3   32    male  28.880         0  northwest   3866.85520\n","4   31  female  25.740         0  southeast   3756.62160"],"text/html":["\n","  <div id=\"df-f9520d1b-48ac-466a-b51a-372b90a14b4f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>31</td>\n","      <td>female</td>\n","      <td>25.740</td>\n","      <td>0</td>\n","      <td>southeast</td>\n","      <td>3756.62160</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9520d1b-48ac-466a-b51a-372b90a14b4f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f9520d1b-48ac-466a-b51a-372b90a14b4f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f9520d1b-48ac-466a-b51a-372b90a14b4f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"jg7hAMJ4jKC5","executionInfo":{"status":"ok","timestamp":1673402764023,"user_tz":360,"elapsed":15,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"70cf3346-f8ba-4a99-f076-d6c02fc13e74","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Check if there are any null values. If any column has null values, treat them accordingly\n","df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age         0\n","sex         0\n","bmi         0\n","children    0\n","region      0\n","charges     0\n","dtype: int64"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"A8RW5WbUuR88","executionInfo":{"status":"ok","timestamp":1673402764556,"user_tz":360,"elapsed":542,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"5144d0cd-4bf7-40a6-cebb-d2c3fb0ee16a","colab":{"base_uri":"https://localhost:8080/","height":334}},"source":["# Create a regression plot between 'age' and 'charges'\n","plt.figure(figsize=(15, 5))\n","sns.regplot(x='age', y='charges', data=df)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"uG9YxYbpjgVG"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"uDTmlU-Mz0fI"},"source":["#### Activity 2: Train-Test Split\n","\n","We have to determine the effect of `age` on insurance charges. Thus, `age` is the feature variable and `charges` is the target variable. \n","\n","Split the dataset into training set and test set such that the training set contains 67% of the instances and the remaining instances will become the test set."]},{"cell_type":"code","metadata":{"id":"Ku_loAWZ0LXr"},"source":["# Split the DataFrame into the training and test sets.\n","x = df['age']\n","y = df['charges']\n","x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.33,random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hCPg7ClP0Om1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"ud8dLfCGjh0E"},"source":["#### Activity 3: Model Training\n","\n","Implement simple linear regression using `sklearn` module in the following way:\n","\n","1. Reshape the feature and the target variable arrays into two-dimensional arrays by using `reshape(-1, 1)` function of numpy module.\n","2. Deploy the model by importing the `LinearRegression` class and create an object of this class.\n","3. Call the `fit()` function on the LinearRegression object and print the slope and intercept values of the best fit line.\n"]},{"cell_type":"code","metadata":{"id":"Xost35Q1XreI","executionInfo":{"status":"ok","timestamp":1673402764557,"user_tz":360,"elapsed":19,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"f42f50fb-12f2-439a-faf5-49268f4e13d4","colab":{"base_uri":"https://localhost:8080/"}},"source":["# 1. Create two-dimensional NumPy arrays for the feature and target variables. \n","# Print the shape or dimensions of these reshaped arrays\n","x_train_reshaped = x_train.values.reshape(-1,1)\n","x_test_reshaped = x_test.values.reshape(-1, 1)\n","y_train_reshaped = y_train.values.reshape(-1,1)\n","y_test_reshaped = y_test.values.reshape(-1,1)\n","\n","print(x_train_reshaped.shape)\n","print(x_test_reshaped.shape)\n","print(y_train_reshaped.shape)\n","print(y_test_reshaped.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(712, 1)\n","(352, 1)\n","(712, 1)\n","(352, 1)\n"]}]},{"cell_type":"code","metadata":{"id":"U9iIV06LXuQP","executionInfo":{"status":"ok","timestamp":1673403089175,"user_tz":360,"elapsed":124,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c32a5bd8-da4a-4e04-d824-05b1b942363b"},"source":["# 2. Deploy linear regression model using the 'sklearn.linear_model' module.\n","  # Create an object of the 'LinearRegression' class.\n","lin_reg = LinearRegression()\n","# 3. Call the 'fit()' function\n","lin_reg.fit(x_train_reshaped, y_train_reshaped)\n","\n"," # Print the slope and intercept values\n","print(f'Slope={lin_reg.coef_}, Intercept={lin_reg.intercept_}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Slope=[[258.95102199]], Intercept=[-1810.68155281]\n"]}]},{"cell_type":"markdown","metadata":{"id":"cAPgWR45mrCo"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"CvcLZdremtHY"},"source":["#### Activity 4: Model Prediction and Evaluation\n","\n","Predict the values for both training and test sets by calling the `predict()` function on the LinearRegression object. Also, calculate the $R^2$, MSE, RMSE and MAE values to evaluate the accuracy of your model."]},{"cell_type":"code","metadata":{"id":"hc3RPNgsX5-0","executionInfo":{"status":"ok","timestamp":1673403196892,"user_tz":360,"elapsed":122,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"94e6aed0-f317-42da-df80-42254fa45008"},"source":["# Predict the target variable values for both training set and test set\n","from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n","\n","y_train_pred = lin_reg.predict(x_train_reshaped)\n","y_test_pred = lin_reg.predict(x_test_reshaped)\n","\n","# Call 'r2_score', 'mean_squared_error' & 'mean_absolute_error' functions of the 'sklearn' module. Calculate RMSE value by taking the square root of MSE.\n","# Print these values for both training set and test set\n","print(f\"Train Set\\n{'-' * 50}\")\n","print(f\"R-squared: {r2_score(y_train_reshaped, y_train_pred):.3f}\")\n","print(f\"Mean Squared Error: {mean_squared_error(y_train_reshaped, y_train_pred):.3f}\")\n","print(f\"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_train_reshaped, y_train_pred)):.3f}\")\n","print(f\"Mean Absolute Error: {mean_absolute_error(y_train_reshaped, y_train_pred):.3f}\")\n","      \n","print(f\"\\n\\nTest Set\\n{'-' * 50}\")\n","print(f\"R-squared: {r2_score(y_test_reshaped, y_test_pred):.3f}\")\n","print(f\"Mean Squared Error: {mean_squared_error(y_test_reshaped, y_test_pred):.3f}\")\n","print(f\"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_test_reshaped, y_test_pred)):.3f}\")\n","print(f\"Mean Absolute Error: {mean_absolute_error(y_test_reshaped, y_test_pred):.3f}\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Set\n","--------------------------------------------------\n","R-squared: 0.375\n","Mean Squared Error: 22108233.952\n","Root Mean Squared Error: 4701.939\n","Mean Absolute Error: 2505.032\n","\n","\n","Test Set\n","--------------------------------------------------\n","R-squared: 0.430\n","Mean Squared Error: 21039679.074\n","Root Mean Squared Error: 4586.903\n","Mean Absolute Error: 2649.282\n"]}]},{"cell_type":"markdown","metadata":{"id":"Bp0p4IT-Dn_w"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"3Q7oRYbO8F1l"},"source":["### Submitting the Project:\n","\n","1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>\n","\n","2. In the dialog box, make sure that '**Anyone on the Internet with this link can view**' option is selected and then click on the **Copy link** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>\n","\n","3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_Project60**) of the notebook will get copied \n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>\n","\n","4. Go to your dashboard and click on the **My Projects** option.\n","   \n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>\n","\n","5. Click on the **View Project** button for the project you want to submit.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>\n","\n","6. Click on the **Submit Project Here** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>\n","\n","7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_Project60** in the URL box and then click on the **Submit** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800> "]},{"cell_type":"markdown","metadata":{"id":"X0ebptyb8PDV"},"source":["---"]}]}