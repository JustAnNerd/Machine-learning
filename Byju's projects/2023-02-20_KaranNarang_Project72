{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1iHDryTxcrnUlwK69EN0OOfXDzTdTEkEK","timestamp":1676948384111}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aQIDTCSIwTP3"},"source":["### Instructions"]},{"cell_type":"markdown","metadata":{"id":"F_IP6BNb3Ne1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"azReToS7wWX3"},"source":["#### Goal of the Project\n","\n","This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lessons:\n","\n"," 1. Deploying A Prediction Model \n"," 2. Model Evaluation\n"," 3. Logistic Regression - Univariate I\n"," \n"," "]},{"cell_type":"markdown","metadata":{"id":"llwKuOyIwnA_"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"KGjZOFRhAVcm"},"source":["#### Getting Started:\n","\n","1. Click on this link to open the Colab file for this project.\n","\n","   https://colab.research.google.com/drive/1iHDryTxcrnUlwK69EN0OOfXDzTdTEkEK\n","\n","2. Create a duplicate copy of the Colab file as described below.\n","\n","  - Click on the **File menu**. A new drop-down list will appear.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/0_file_menu.png' width=500>\n","\n","  - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/1_create_colab_duplicate_copy.png' width=500>\n","\n","3. After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_Project72** format.\n","\n","4. Now, write your code in the prescribed code cells.\n"]},{"cell_type":"markdown","metadata":{"id":"Ys32toVqAbJ0"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"fR_SN7K6475D"},"source":["### Problem Statement\n","\n","Nowadays, social media advertising is one of the popular forms of  advertising. Advertisers can utilise user's demographic information and target their ads accordingly.\n","\n","Implement Random Forest Classification and Logistic Regression to determine whether a user will purchase a particular product displayed on a social network ad or not.  Compare the accuracy of both the classification algorithms.\n"]},{"cell_type":"markdown","metadata":{"id":"lN1iCMJ4Oy1N"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"L3zN-iv-wpjm"},"source":["### List of Activities\n","\n","**Activity 1:** Analysing the Dataset\n","\n","**Activity 2:** Train-Test Split\n","\n","**Activity 3:** Random Forest Classification - Model Training \n","\n","**Activity 4:** Random Forest Classification - Model Prediction and Evaluation\n","\n","**Activity 5:** Logistic Regression - Model Training\n","\n","**Activity 6:** Logistic Regression - Model Prediction and Evaluation\n","\n","**Activity 7:** Comparision and Conclusion\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"jLudEnlPO0FF"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lZt4yKiJwrUs"},"source":["\n","#### Activity 1:  Analysing the Dataset\n","\n","- Create a Pandas DataFrame for **Social Network** dataset using the below link. This dataset consists of following columns:\n","\n","|Field|Description|\n","|---:|:---|\n","|UserID|Unique ID|\n","|Gender|Male or Female|\n","|Age|Age of a person|\n","|EstimatedSalary|Salary of a person|\n","|Purchased|‘0’ or ‘1’. ‘0’ means not purchased and ‘1’ means purchased.|\n","\n","\n","  **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/social-network-ads.csv\n","\n","- Print the first five rows of the dataset. Check for null values and treat them accordingly (if any).\n","\n","- Create a heatmap to identify the relationship between the independent attributes and dependent attribute `Purchased`.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"0Ur0bY85pWfy","executionInfo":{"status":"ok","timestamp":1676947687186,"user_tz":360,"elapsed":3382,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"d29c11eb-d8a3-4dff-bbff-57d003eba2d2","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Import modules\n","import pandas as pd\n","import numpy as np\n","\n","# Load the dataset\n","# Dataset Link: 'https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/social-network-ads.csv'\n","df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/social-network-ads.csv')\n","# Print the first five rows of the dataframe\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510    Male   19            19000          0\n","1  15810944    Male   35            20000          0\n","2  15668575  Female   26            43000          0\n","3  15603246  Female   27            57000          0\n","4  15804002    Male   19            76000          0"],"text/html":["\n","  <div id=\"df-d7684de1-ab82-4a37-a991-035dd2885761\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>Male</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>Female</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>Female</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7684de1-ab82-4a37-a991-035dd2885761')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d7684de1-ab82-4a37-a991-035dd2885761 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d7684de1-ab82-4a37-a991-035dd2885761');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"OiSg9X-VIfox","executionInfo":{"status":"ok","timestamp":1676947687337,"user_tz":360,"elapsed":156,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"949ef45b-06de-4e63-f9f7-35324532c1cb","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Print the dataset information\n","df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 400 entries, 0 to 399\n","Data columns (total 5 columns):\n"," #   Column           Non-Null Count  Dtype \n","---  ------           --------------  ----- \n"," 0   User ID          400 non-null    int64 \n"," 1   Gender           400 non-null    object\n"," 2   Age              400 non-null    int64 \n"," 3   EstimatedSalary  400 non-null    int64 \n"," 4   Purchased        400 non-null    int64 \n","dtypes: int64(4), object(1)\n","memory usage: 15.8+ KB\n"]}]},{"cell_type":"markdown","metadata":{"id":"5Wzjpm4fIoD2"},"source":["**Q:** Are there any missing values?\n","\n","**A:** no"]},{"cell_type":"code","metadata":{"id":"O6x-PNjWq9qL","executionInfo":{"status":"ok","timestamp":1676947760584,"user_tz":360,"elapsed":462,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"f8b310a9-8543-43b8-b476-5d824de69d70","colab":{"base_uri":"https://localhost:8080/","height":324}},"source":["# Create a heatmap to identify the relation between attributes\n","import matplotlib.pyplot as plt\n","plt.figure(figsize=(15, 5))\n","import seaborn as sns\n","sns.heatmap(df.corr(), annot=True)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"PiamSiddn8Tf"},"source":["**Q:** Which attribute(s) has the strongest relationship with the `Purchased` feature?\n","\n","**A:** Age"]},{"cell_type":"markdown","metadata":{"id":"GvPGpv33MagO"},"source":["---\n"]},{"cell_type":"markdown","metadata":{"id":"uDTmlU-Mz0fI"},"source":["#### Activity 2: Train-Test Split\n","\n","We have to determine the effect of `Age` on purchase of the products. Thus, `Age` is the feature variable and `Purchased` is the target variable. \n","\n","- Split the dataset into training set and test set such that the training set contains 70% of the instances and the remaining instances will become the test set.\n","\n","- Reshape the feature and the target variable arrays into two-dimensional arrays by using `reshape(-1, 1)` function of `numpy` module.\n"]},{"cell_type":"code","metadata":{"id":"uYoe69GREXWK"},"source":["# Split the DataFrame into the train and test sets.\n","x = df['Age']\n","y = df['Purchased']\n","# Split the DataFrame into the train and test sets such that test set has 30% of the values.\n","from sklearn.model_selection import train_test_split\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)\n","# Reshape to 2-dimensional array.\n","x_train = np.array(x_train).reshape(-1, 1)\n","y_train = np.array(y_train).reshape(-1, 1)\n","x_test = np.array(x_test).reshape(-1, 1)\n","y_test = np.array(y_test).reshape(-1, 1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BKGeeZDCNuBY"},"source":["----"]},{"cell_type":"markdown","metadata":{"id":"ud8dLfCGjh0E"},"source":["#### Activity 3: Random Forest Classification - Model Training \n","\n","Implement Random Forest Classification using `sklearn` module in the following way:\n","\n","1. Deploy the model by importing the `RandomForestClassifier` class and create an object of this class.\n","2. Call the `fit()` function using the Random Forest Classifier object and print score using `score()` function using the object created.\n"]},{"cell_type":"code","metadata":{"id":"yh2mu9ZkUz_e"},"source":["# Import the required modules from the 'sklearn.ensemble' and 'sklearn.metrics' libraries\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report, confusion_matrix"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"n4cMnv2jyQGz","executionInfo":{"status":"ok","timestamp":1676948032472,"user_tz":360,"elapsed":314,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"b62c6b03-b3e3-4d14-b234-a58004eef7fd","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Train the Random Forest Classifier\n","rf_clf = RandomForestClassifier(n_jobs = -1, n_estimators=100)\n","rf_clf.fit(x_train, y_train)\n","rf_clf.score(x_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-39c21bbfb706>:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf_clf.fit(x_train, y_train)\n"]},{"output_type":"execute_result","data":{"text/plain":["0.825"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"wUwWtI6HOg4e"},"source":["-----"]},{"cell_type":"markdown","metadata":{"id":"fvIZzRlGOm3x"},"source":["#### Activity 4: Random Forest Classification - Model Prediction and Evaluation\n","\n","Predict the values for both training and test sets by calling the `predict()` function on the Random Forest Classifier object. \n","\n","Also, compute confusion matrix and classification report values to evaluate the accuracy of your model."]},{"cell_type":"code","metadata":{"id":"ylnKkzbrT6Jr","executionInfo":{"status":"ok","timestamp":1676948086265,"user_tz":360,"elapsed":101,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"247fc842-15b1-456b-b7d1-03741d6517ee","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Make predictions on the test dataset by using the 'predict()' function.\n","rf_clf_pred = rf_clf.predict(x_test)\n","rf_clf_pred"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,\n","       1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n","       0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n","       0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1,\n","       0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0,\n","       0, 1, 1, 1, 1, 0, 0, 0, 0, 0])"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"4_kCRRwloRd-","executionInfo":{"status":"ok","timestamp":1676948135702,"user_tz":360,"elapsed":106,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"d0bef43d-00b7-4a64-f151-0e8c8724cddd","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Display the results of 'confusion_matrix'\n","confusion_matrix(y_test, rf_clf_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[65,  8],\n","       [10, 37]])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"LMH7f---UTVy","executionInfo":{"status":"ok","timestamp":1676948153366,"user_tz":360,"elapsed":313,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"3a8bd99f-1d7f-4b7a-8f03-e4c4178d4931","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Display the precision, recall and f1-score values.\n","print(classification_report(y_test, rf_clf_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.87      0.89      0.88        73\n","           1       0.82      0.79      0.80        47\n","\n","    accuracy                           0.85       120\n","   macro avg       0.84      0.84      0.84       120\n","weighted avg       0.85      0.85      0.85       120\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"wIYiau2IR_gL"},"source":["**Q** Write the count of f1-score of both labels?\n","\n","**A:** 0.88, 0.80"]},{"cell_type":"markdown","metadata":{"id":"rhmsmtCNY7DD"},"source":["----"]},{"cell_type":"markdown","metadata":{"id":"9hn9AfqoY7DE"},"source":["#### Activity 5: Logistic Regression - Model Training \n","\n","Implement Logistic Regression Classification using `sklearn` module in the following way:\n","\n","1. Deploy the model by importing the `LogisticRegression` class and create an object of this class.\n","2. Call the `fit()` function on the Logistic Regression object and print score using `score()` function using the object created.\n"]},{"cell_type":"code","metadata":{"id":"YxtlCGgAeUkl","executionInfo":{"status":"ok","timestamp":1676948198465,"user_tz":360,"elapsed":2056,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"46dc4890-02ac-44ae-d849-21d3f1e5f331","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Deploy the 'LogisticRegression' model using the 'fit()' function.\n","from sklearn.linear_model import LogisticRegression\n","log_reg = LogisticRegression(n_jobs = -1)\n","log_reg.fit(x_train, y_train)\n","log_reg.score(x_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["0.8214285714285714"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"xIoqmi5tarQC"},"source":["----"]},{"cell_type":"markdown","metadata":{"id":"4J0gTaZrZoeK"},"source":["#### Activity 6: Logistic Regression - Model Prediction and Evaluation\n","\n","Predict the values for both training and test sets by calling the `predict()` function on the Logistic Regression object. \n","\n","Also, compute the confusion matrix and classification report values to evaluate the accuracy of your model."]},{"cell_type":"code","metadata":{"id":"9JMQlyNOfDAq"},"source":["# Make predictions on the test dataset by using the 'predict()' function.\n","log_reg_pred = log_reg.predict(x_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r24aTqpxfnQH","executionInfo":{"status":"ok","timestamp":1676948243201,"user_tz":360,"elapsed":91,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"395df318-ba01-486f-f6bc-5942a86096c2","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Display the results of confusion_matrix\n","confusion_matrix(y_test, log_reg_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[70,  3],\n","       [12, 35]])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"KO8P9HHCfnQN","executionInfo":{"status":"ok","timestamp":1676948244292,"user_tz":360,"elapsed":112,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"9a7ba027-2036-48e1-ea29-ecc9c0ef7572","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Display the results of classification_report\n","print(classification_report(y_test, log_reg_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.85      0.96      0.90        73\n","           1       0.92      0.74      0.82        47\n","\n","    accuracy                           0.88       120\n","   macro avg       0.89      0.85      0.86       120\n","weighted avg       0.88      0.88      0.87       120\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"pjyDMPuaaDYy"},"source":["**Q** Write the count of f1-score of both labels?\n","\n","**A:** 0.90, 0.82"]},{"cell_type":"markdown","metadata":{"id":"G-iaOImYbQPn"},"source":["-----"]},{"cell_type":"markdown","metadata":{"id":"hASrZQs2bSPw"},"source":["#### Activity 7: Comparision and Conclusion\n","\n","Test both the models to predict labels using same random values of `Age` attribute."]},{"cell_type":"code","metadata":{"id":"B97SLEbh8yP5","executionInfo":{"status":"ok","timestamp":1676948320154,"user_tz":360,"elapsed":245,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"9a744074-2fec-408f-b156-69c2487412f5","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Predict labels with same random values from dataset\n","\n","# Using Random Forest Classifier\n","print(f'Prediction of age = 58 using forest roof classifier: {rf_clf.predict(np.array(58).reshape(-1, 1))}')\n","print(f'Prediction of cholestrol levels = 37 using forest roof classifier: {rf_clf.predict(np.array(37).reshape(-1, 1))}')\n","\n","# Using Logistic Regression\n","print(f'Prediction of cholestrol levels = 58 using logistic regression: {log_reg.predict(np.array(58).reshape(-1, 1))}')\n","print(f'Prediction of cholestrol levels = 37 using logistic regression: {log_reg.predict(np.array(37).reshape(-1, 1))}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Prediction of age = 58 using forest roof classifier: [1]\n","Prediction of cholestrol levels = 37 using forest roof classifier: [0]\n","Prediction of cholestrol levels = 58 using logistic regression: [1]\n","Prediction of cholestrol levels = 37 using logistic regression: [0]\n"]}]},{"cell_type":"markdown","metadata":{"id":"Iv5oofuelp3C"},"source":["**Q** Which model is better and why?\n","\n","**A:** they got the same prediction, so for the numbers that I picked they are the same"]},{"cell_type":"markdown","metadata":{"id":"RcuEHS3WmTu7"},"source":["------"]},{"cell_type":"markdown","metadata":{"id":"dnJD9U97AhXF"},"source":["### Submitting the Project:\n","\n","1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>\n","\n","2. In the dialog box, make sure that '**Anyone on the Internet with this link can view**' option is selected and then click on the **Copy link** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>\n","\n","3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_Project72**) of the notebook will get copied \n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>\n","\n","4. Go to your dashboard and click on the **My Projects** option.\n","   \n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>\n","\n","5. Click on the **View Project** button for the project you want to submit.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>\n","\n","6. Click on the **Submit Project Here** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>\n","\n","7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_Project72** in the URL box and then click on the **Submit** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800> "]},{"cell_type":"markdown","metadata":{"id":"0hqP1v7BAlYV"},"source":["---"]}]}