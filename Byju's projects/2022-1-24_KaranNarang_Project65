{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1GKgwblmYqlr4ymCDBIdL66kf72nj-7XT","timestamp":1674612025042},{"file_id":"1EKdTNaCs2XxyYHeXLDsN57fuvGA_fiIH","timestamp":1602316450915},{"file_id":"1wEN2Z8ov5pkaIoP2o9phr-1Vuc_ISEAH","timestamp":1602166063093},{"file_id":"1fOHp8CVHVpnhtwRgmJS0LHbqbS2PoYb8","timestamp":1601993253519},{"file_id":"1dWEN7HK_CoqLnNqGjIVQCBdBbbUb11s0","timestamp":1600868770193}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aQIDTCSIwTP3"},"source":["### Instructions"]},{"cell_type":"markdown","metadata":{"id":"F_IP6BNb3Ne1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"azReToS7wWX3"},"source":["#### Goal of the Project\n","\n","This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lessons:\n","\n"," 1. Multiple linear regression - Introduction\n"," 2. Multicollinearity\n"," \n"," "]},{"cell_type":"markdown","metadata":{"id":"llwKuOyIwnA_"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"vEJNgBLXpAaq"},"source":["#### Getting Started:\n","\n","1. Click on this link to open the Colab file for this project.\n","\n","  https://colab.research.google.com/drive/1GKgwblmYqlr4ymCDBIdL66kf72nj-7XT\n","\n","2. Create a duplicate copy of the Colab file as described below.\n","\n","  - Click on the **File menu**. A new drop-down list will appear.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/0_file_menu.png' width=500>\n","\n","  - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/1_create_colab_duplicate_copy.png' width=500>\n","\n","3. After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_Project65** format.\n","\n","4. Now, write your code in the prescribed code cells.\n"]},{"cell_type":"markdown","metadata":{"id":"JHRVR5qypHRS"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"fR_SN7K6475D"},"source":["### Problem Statement\n","\n","Implement multiple linear regression to create a predictive model capable of predicting the profits earned by startup companies. The dataset contains data about 50 startups and the amount of money they spend on research and development, administration and marketing. Also, find out if there is multicollinearity in the dataset.\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"lN1iCMJ4Oy1N"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"L3zN-iv-wpjm"},"source":["### List of Activities\n"," \n","**Activity 1:** Analysing the Dataset\n"," \n","**Activity 2:** Data Manipulation\n"," \n","**Activity 3:** Train-Test Split\n"," \n","**Activity 4:** Model Training and Prediction using `sklearn`\n"," \n","**Activity 5:** Model Training using `statsmodels.api` \n"," \n"]},{"cell_type":"markdown","metadata":{"id":"jLudEnlPO0FF"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lZt4yKiJwrUs"},"source":[" \n","#### Activity 1:  Analysing the Dataset\n"," \n","- Create a Pandas DataFrame for **Startups** dataset using the below link. This dataset contains profits earned by 50 startups and their several expenditure values.\n"," \n"," \n"," \n","   **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/50_Startups.csv\n"," \n","- Print the first five rows of the dataset. Check for null values and treat them accordingly."]},{"cell_type":"code","metadata":{"id":"6U6NaAy4WQgs","executionInfo":{"status":"ok","timestamp":1674611752759,"user_tz":360,"elapsed":908,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"cc539e1f-5a53-43ec-db56-04269b1adbfd","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Import modules\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n","import warnings\n","import statsmodels.api as sm\n","warnings.filterwarnings('ignore')\n","# Load the dataset\n","# Dataset Link: 'https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/50_Startups.csv'\n","df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/50_Startups.csv')\n","# Print first five rows using head() function\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   R&D Spend  Administration  Marketing Spend       State     Profit\n","0  165349.20       136897.80        471784.10    New York  192261.83\n","1  162597.70       151377.59        443898.53  California  191792.06\n","2  153441.51       101145.55        407934.54     Florida  191050.39\n","3  144372.41       118671.85        383199.62    New York  182901.99\n","4  142107.34        91391.77        366168.42     Florida  166187.94"],"text/html":["\n","  <div id=\"df-7df43a05-6df3-412d-9082-6f35ef16d845\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>R&amp;D Spend</th>\n","      <th>Administration</th>\n","      <th>Marketing Spend</th>\n","      <th>State</th>\n","      <th>Profit</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>165349.20</td>\n","      <td>136897.80</td>\n","      <td>471784.10</td>\n","      <td>New York</td>\n","      <td>192261.83</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>162597.70</td>\n","      <td>151377.59</td>\n","      <td>443898.53</td>\n","      <td>California</td>\n","      <td>191792.06</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>153441.51</td>\n","      <td>101145.55</td>\n","      <td>407934.54</td>\n","      <td>Florida</td>\n","      <td>191050.39</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>144372.41</td>\n","      <td>118671.85</td>\n","      <td>383199.62</td>\n","      <td>New York</td>\n","      <td>182901.99</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>142107.34</td>\n","      <td>91391.77</td>\n","      <td>366168.42</td>\n","      <td>Florida</td>\n","      <td>166187.94</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7df43a05-6df3-412d-9082-6f35ef16d845')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7df43a05-6df3-412d-9082-6f35ef16d845 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7df43a05-6df3-412d-9082-6f35ef16d845');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"jg7hAMJ4jKC5","executionInfo":{"status":"ok","timestamp":1674611752759,"user_tz":360,"elapsed":34,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"4bbebb2c-fe24-43c1-e125-6861c83f5f84","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Check if there are any null values. If any column has null values, treat them accordingly\n","df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["R&D Spend          0\n","Administration     0\n","Marketing Spend    0\n","State              0\n","Profit             0\n","dtype: int64"]},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","metadata":{"id":"T2b18ifmveiZ"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"AfaJH332Vef7"},"source":["#### Activity 2: Data Manipulation\n","\n","The dataset contains a column `State` that is categorical. However for linear regression, we need all numerical variables. So to convert the categorical data to a numerical data, \n","- Use `unique()` function to get the unique categories of the `State` column.\n","- Replace the unique categories with intergers starting from `0`, `1`, `2`,...\n"]},{"cell_type":"code","metadata":{"id":"70-DsDv5YAS3","executionInfo":{"status":"ok","timestamp":1674611752760,"user_tz":360,"elapsed":30,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"e8e876e8-916a-4cf4-e40f-994b7149f85c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Display the number of occurrences of each label in the 'State' column.\n","df['State'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["New York      17\n","California    17\n","Florida       16\n","Name: State, dtype: int64"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"WF5XlseCkRYm","executionInfo":{"status":"ok","timestamp":1674611752760,"user_tz":360,"elapsed":28,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"c814c0f5-b841-4c2a-b195-448cac32e1d7","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Create a list of unique categories using 'unique()' function and print them\n","unique_state = df['State'].unique()\n","unique_state"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['New York', 'California', 'Florida'], dtype=object)"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","metadata":{"id":"-QoaAJ58kiEF"},"source":["# Replace the unique non-numeric categories in 'State' column with numeric values \n","df.replace(to_replace=\"New York\", value=0, inplace=True)\n","df.replace(to_replace=\"California\", value=1, inplace=True)\n","df.replace(to_replace=\"Florida\", value=2, inplace=True)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WOnWUceHlxHK","executionInfo":{"status":"ok","timestamp":1674611752761,"user_tz":360,"elapsed":25,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"4b263ecb-8163-40e5-c00e-e51f8e0f25ff","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Display the number of occurrences of each label in the 'State' column again.\n","print(df['State'].dtype)\n","df['State'].value_counts()\n","# Print the datatype of the column\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["int64\n"]},{"output_type":"execute_result","data":{"text/plain":["0    17\n","1    17\n","2    16\n","Name: State, dtype: int64"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"2OF5sSuSlKMI","executionInfo":{"status":"ok","timestamp":1674611752761,"user_tz":360,"elapsed":20,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"b2e6b707-3a42-4e2b-c2fa-7a96c36b014c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Convert the column into integer DataFrame.\n","df['State'].astype(int)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     0\n","1     1\n","2     2\n","3     0\n","4     2\n","5     0\n","6     1\n","7     2\n","8     0\n","9     1\n","10    2\n","11    1\n","12    2\n","13    1\n","14    2\n","15    0\n","16    1\n","17    0\n","18    2\n","19    0\n","20    1\n","21    0\n","22    2\n","23    2\n","24    0\n","25    1\n","26    2\n","27    0\n","28    2\n","29    0\n","30    2\n","31    0\n","32    1\n","33    2\n","34    1\n","35    0\n","36    2\n","37    1\n","38    0\n","39    1\n","40    1\n","41    2\n","42    1\n","43    0\n","44    1\n","45    0\n","46    2\n","47    1\n","48    0\n","49    1\n","Name: State, dtype: int64"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","metadata":{"id":"XWXbNSGEkIav"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"uDTmlU-Mz0fI"},"source":["#### Activity 3: Train-Test Split\n"," \n","We need to predict the value of `Profit` variable, using other variables. Thus, `Profit` is the target or dependent variable and other columns except `Profit` are the features or the independent variables.\n"," \n","Split the dataset into training set and test set such that the training set contains 70% of the instances and the remaining instances will become the test set."]},{"cell_type":"code","source":["df.columns"],"metadata":{"id":"NZEhLS5JndlL","executionInfo":{"status":"ok","timestamp":1674611752762,"user_tz":360,"elapsed":17,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"9143dfdd-6bcf-4739-9691-9eec5291e65d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['R&D Spend', 'Administration', 'Marketing Spend', 'State', 'Profit'], dtype='object')"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["features"],"metadata":{"id":"2cuRzja_nXGF","executionInfo":{"status":"ok","timestamp":1674611752995,"user_tz":360,"elapsed":247,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"ed8f30da-98a4-4701-96a8-81c5705d18aa","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['R&D Spend', 'Administration', 'Marketing Spend', 'State']"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","metadata":{"id":"Ku_loAWZ0LXr"},"source":["# Split the DataFrame into the training and test sets.\n","features = list(df.columns.values)\n","features.remove('Profit')\n","x = df[features]\n","y = df['Profit']\n","x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.7,random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hCPg7ClP0Om1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"ud8dLfCGjh0E"},"source":["#### Activity 4: Model Training and Prediction using `sklearn`\n","\n","Implement multiple linear regression using `sklearn` module by creating an object of the `LinearRegression` class and calling the `fit()` function.\n","\n","**Note:** Reshaping the target variable array into a 2D array is not mandatory in multiple linear regression. You can skip that."]},{"cell_type":"code","metadata":{"id":"Xost35Q1XreI","executionInfo":{"status":"ok","timestamp":1674611752998,"user_tz":360,"elapsed":16,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"07bab8d6-6b14-4d84-c3af-e1d1e892c675","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Build linear regression model using sklearn module\n","model = LinearRegression()\n","\n","\n","# Print the value of the intercept \n","model.fit(x_train, y_train)\n","intercept = model.intercept_\n","print(model.intercept_)\n","slope=model.coef_\n","\n","# Print the names of the features along with the values of their corresponding coefficients.\n","print('Names of features along with the values of their corresponding coefficients')\n","for i in range(len(features)):\n","  print(features[i],': ', slope[i], '\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["58770.11486015833\n","Names of features along with the values of their corresponding coefficients\n","R&D Spend :  0.9437131662389392 \n","\n","Administration :  -0.10305744453622129 \n","\n","Marketing Spend :  0.03385451397469268 \n","\n","State :  -8410.875405629724 \n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"2oTOJMotZlBJ"},"source":["Predict the values for the test set by calling the `predict()` function on the LinearRegression object. "]},{"cell_type":"code","metadata":{"id":"cy2A_HP8Zp66","executionInfo":{"status":"ok","timestamp":1674611753000,"user_tz":360,"elapsed":17,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"a20b1c89-0f41-47a6-bc5c-fbfb37f89085","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Predict the target variable values for test set\n","\n","y_test_pred = model.predict(x_test)\n","y_test_pred"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([131763.74183346,  84120.00712182,  91620.88009745,  46983.60667141,\n","       142714.41430343,  53949.13777066, 102721.1246694 , 101672.84307277,\n","        98442.16644232, 124504.75169573, 125865.70056919, 179034.78345023,\n","        93333.85740164, 167750.59961567, 195759.27830981, 166551.47292251,\n","        65109.28036698,  41312.72397024,  36402.48715792, 163073.28231164,\n","       165876.79654883, 120399.01311833, 126004.97215611,  85057.05322101,\n","       103714.83725173, 216676.01590309,  56293.99767725, 125598.47882756,\n","        90964.25092539, 185221.92775621, 108538.89486081, 144359.96823667,\n","        62713.69417813, 203232.21114648, 127047.25333332])"]},"metadata":{},"execution_count":60}]},{"cell_type":"markdown","metadata":{"id":"cAPgWR45mrCo"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"Z6RkwNpUZ70Z"},"source":["#### Activity 5: Model Training using `statsmodels.api`\n","\n","Perform the following tasks:\n","- Implement multiple linear regression using `statsmodels.api` module and find the values of all the regression coefficients using this module.\n","-Print the statistical summary of the regression model.\n","- If the summary indicates the presence of multicollinearity, create a heatmap of a correlation DataFrame to identify which independent variables are highly correlated with each other."]},{"cell_type":"code","metadata":{"id":"nVsOvcydR204","executionInfo":{"status":"ok","timestamp":1674611812740,"user_tz":360,"elapsed":148,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"50e2fc0b-b7ba-49b4-b7e1-09265fb1b2fa","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Build a linear regression model using the 'statsmodels.api' module.\n","X_train = x_train[features]\n","X_test = x_test[features]\n","\n","# Add a constant to feature variables \n","model2 = sm.add_constant(x_train)\n","\n","# Fit the regression line using 'OLS'\n","lr1 = sm.OLS(y_train, model2).fit()\n","lr1.params\n","# Print the parameters, i.e. the intercept and the slope of the regression line fitted\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["const              58770.114863\n","R&D Spend              0.943713\n","Administration        -0.103057\n","Marketing Spend        0.033855\n","State              -8410.875406\n","dtype: float64"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"j0PX_kHkSF0f","executionInfo":{"status":"ok","timestamp":1674611826284,"user_tz":360,"elapsed":127,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"d854cfe4-3a9d-42d8-e9c1-440bf4966c42","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Print statistical summary of the model \n","print(lr1.summary())"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:                 Profit   R-squared:                       0.944\n","Model:                            OLS   Adj. R-squared:                  0.921\n","Method:                 Least Squares   F-statistic:                     41.81\n","Date:                Wed, 25 Jan 2023   Prob (F-statistic):           3.27e-06\n","Time:                        01:57:06   Log-Likelihood:                -158.94\n","No. Observations:                  15   AIC:                             327.9\n","Df Residuals:                      10   BIC:                             331.4\n","Df Model:                           4                                         \n","Covariance Type:            nonrobust                                         \n","===================================================================================\n","                      coef    std err          t      P>|t|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","const            5.877e+04   2.52e+04      2.335      0.042    2682.711    1.15e+05\n","R&D Spend           0.9437      0.177      5.338      0.000       0.550       1.338\n","Administration     -0.1031      0.195     -0.529      0.608      -0.537       0.331\n","Marketing Spend     0.0339      0.079      0.430      0.676      -0.142       0.209\n","State           -8410.8754   7027.333     -1.197      0.259   -2.41e+04    7246.998\n","==============================================================================\n","Omnibus:                        6.322   Durbin-Watson:                   2.020\n","Prob(Omnibus):                  0.042   Jarque-Bera (JB):                3.307\n","Skew:                          -1.051   Prob(JB):                        0.191\n","Kurtosis:                       3.932   Cond. No.                     2.31e+06\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","[2] The condition number is large, 2.31e+06. This might indicate that there are\n","strong multicollinearity or other numerical problems.\n"]}]},{"cell_type":"markdown","metadata":{"id":"Lp-a0Ug2buWu"},"source":["**Q:** What is the $R^2$ (R-squared) value for this model?\n","\n","**A:**0.944\n","\n","**Q:** Does the summary table indicates the presence of multicollinearity?\n","\n","**A:** Yes"]},{"cell_type":"code","metadata":{"id":"Cin7g2-4S7Qr","executionInfo":{"status":"ok","timestamp":1674611904229,"user_tz":360,"elapsed":702,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"5ec83610-d320-4488-df8b-23f844a7cffa","colab":{"base_uri":"https://localhost:8080/","height":666}},"source":["# If there is multicollinearity, create a heatmap of a correlation DataFrame of the Startup dataset.\n","# If no, skip this part\n","plt.figure(figsize=(30, 15))\n","sns.heatmap(df.corr(), annot=True)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Bp0p4IT-Dn_w"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"2NQqcuR_pNQQ"},"source":["### Submitting the Project:\n","\n","1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>\n","\n","2. In the dialog box, make sure that '**Anyone on the Internet with this link can view**' option is selected and then click on the **Copy link** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>\n","\n","3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_Project65**) of the notebook will get copied \n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>\n","\n","4. Go to your dashboard and click on the **My Projects** option.\n","   \n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>\n","\n","5. Click on the **View Project** button for the project you want to submit.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>\n","\n","6. Click on the **Submit Project Here** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>\n","\n","7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_Project65** in the URL box and then click on the **Submit** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800> "]},{"cell_type":"markdown","metadata":{"id":"ZQXpukmTpSf8"},"source":["---"]}]}