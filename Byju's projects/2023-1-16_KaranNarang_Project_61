{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1XoM9UIhihy3gnJykFBL2-CYNHFfljtgx","timestamp":1673404202247},{"file_id":"1oH7qXahavWh-KZLlCSqjgxRfXPCqffOc","timestamp":1601902096467},{"file_id":"1VIHvENGMHt0wBtvAJmWw3cAJWP5tTt0s","timestamp":1601875667557},{"file_id":"1fOHp8CVHVpnhtwRgmJS0LHbqbS2PoYb8","timestamp":1601872492254},{"file_id":"1dWEN7HK_CoqLnNqGjIVQCBdBbbUb11s0","timestamp":1600868770193}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aQIDTCSIwTP3"},"source":["### Instructions"]},{"cell_type":"markdown","metadata":{"id":"F_IP6BNb3Ne1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"azReToS7wWX3"},"source":["#### Goal of the Project\n","\n","This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lessons:\n","\n"," 1. Simple Linear Regression - Model Evaluation\n"," \n"," 2. Simple Linear Regression - Residual Analysis\n"," "]},{"cell_type":"markdown","metadata":{"id":"llwKuOyIwnA_"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"pivcGE4sSDbB"},"source":["#### Getting Started:\n","\n","1. Click on this link to open the Colab file for this project.\n","\n","  https://colab.research.google.com/drive/1XoM9UIhihy3gnJykFBL2-CYNHFfljtgx\n","\n","2. Create a duplicate copy of the Colab file as described below.\n","\n","  - Click on the **File menu**. A new drop-down list will appear.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/0_file_menu.png' width=500>\n","\n","  - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/1_create_colab_duplicate_copy.png' width=500>\n","\n","3. After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_Project61** format.\n","\n","4. Now, write your code in the prescribed code cells.\n"]},{"cell_type":"markdown","metadata":{"id":"G_bG9Cr0SLeC"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"fR_SN7K6475D"},"source":["### Problem Statement\n","\n","While working in a job environment, the monetary gained value is 'Salary' which is different for every person based on various parameters. \n","\n","Build a model that is capable of predicting the salary of a person based on his/her **years of experience** using simple linear regression. Also, evaluate the accuracy of your model by performing residual analysis.\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"lN1iCMJ4Oy1N"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"L3zN-iv-wpjm"},"source":["### List of Activities\n","\n","**Activity 1:** Analysing the Dataset\n","\n","  \n","**Activity 2:**  Train-Test Split\n","\n","**Activity 3:**  Model Training\n","\n","**Activity 4:** Model Prediction \n","\n","**Activity 5:** Residual Analysis\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"jLudEnlPO0FF"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lZt4yKiJwrUs"},"source":["\n","#### Activity 1:  Analysing the Dataset\n","\n","- Create a Pandas DataFrame for **Salary** dataset using the below link. This dataset consists of following columns:\n","\n","|Field|Description|\n","|---:|:---|\n","|YearsExperience|Years of experience of a person|\n","|Salary|Salary of a person|\n","\n","  **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/salary.csv\n","  \n","- Print the first five rows of the dataset. Check for null values and treat them accordingly.\n","\n","- Create a regression plot with `YearsExperience` on X-axis and `Salary` on Y-axis to identify the relationship between these two attributes.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"6U6NaAy4WQgs","executionInfo":{"status":"ok","timestamp":1673922523464,"user_tz":360,"elapsed":6203,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"d31d2425-5f1d-4079-9db6-cc2a70e530b9","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Import modules\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","# Load the dataset\n","df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/salary.csv')\n","# Dataset Link: 'https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/salary.csv'\n","\n","# Print first five rows using head() function\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   YearsExperience  Salary\n","0              1.1   39343\n","1              1.3   46205\n","2              1.5   37731\n","3              2.0   43525\n","4              2.2   39891"],"text/html":["\n","  <div id=\"df-b8e731ec-4724-4011-8696-2708d7bfce00\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>YearsExperience</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.1</td>\n","      <td>39343</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.3</td>\n","      <td>46205</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.5</td>\n","      <td>37731</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.0</td>\n","      <td>43525</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.2</td>\n","      <td>39891</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8e731ec-4724-4011-8696-2708d7bfce00')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b8e731ec-4724-4011-8696-2708d7bfce00 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b8e731ec-4724-4011-8696-2708d7bfce00');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"jg7hAMJ4jKC5","executionInfo":{"status":"ok","timestamp":1673922523768,"user_tz":360,"elapsed":312,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"90a02403-7575-42b2-ff00-75f3766fe179","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Check if there are any null values. If any column has null values, treat them accordingly\n","df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["YearsExperience    0\n","Salary             0\n","dtype: int64"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"A8RW5WbUuR88","executionInfo":{"status":"ok","timestamp":1673922524554,"user_tz":360,"elapsed":790,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"419301bd-4124-4a94-bd3f-df55a979ee85","colab":{"base_uri":"https://localhost:8080/","height":334}},"source":["# Create a regression plot between 'YearsExperience' and 'Salary'\n","plt.figure(figsize=(15, 5))\n","sns.regplot(x='YearsExperience', y='Salary', data=df)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA44AAAE9CAYAAABENjxmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde3Bc53nn+e/bpy/oBolbkxQvAAk2JIu2ZMuWIJLAVDhMMkk5l1lPZV22NrWJ48nE2p1k45raqok9m2VmlGzWmUzGpRpnHTqO13ZqEiYTpzasbDyOE4Xh1BK8ibZk06YioXkBKFIQuxvXvp/z7h/noIUGCaBBonHj71OlInne06cPylUWf3qf93mMtRYRERERERGRhYTW+gVERERERERkfVNwFBERERERkUUpOIqIiIiIiMiiFBxFRERERERkUQqOIiIiIiIisigFRxEREREREVlUeK1fYL3Ytm2b7e3tXevXEBERERERWRMvv/zyHWvt9nutKTgGent7uXjx4lq/hoiIiIiIyJowxlxfaE2lqiIiIiIiIrIoBUcRERERERFZlIKjiIiIiIiILErBUURERERERBal4CgiIiIiIiKLUnAUERERERGRRSk4ioiIiIiIyKIUHEVERERERGRRCo4iIiIiIiKyKAVHERERERERWZSCo4iIiIiIyCooVV0m8pW1fo37El7rFxAREREREdmsihWXmVKVfNml4no4IUN7IrLWr7VsCo4iIiIiIiIrqFB2mSlXyZdcqp631q+zIhQcRUREREREHoC1lkLFZabkki9XcT271q+04hQcRURERERElslaS37OzqJnN19YnEvBUUREREREpAGeZ8nPObNoN3lYnEvBUUREREREZAGuZ8mXq8yUXAqVhysszqXgKCIiIiIiMkfV9Zgp++cVixXvoQ2Lcyk4ioiIiIjIQ6/ieuRL/pnFYsVd69dZdxQcRURERETkoVSuen4ZatmltAphMTtT5tzVDOWq5V/9yLua/n0rScFRREREREQeGqWqS77kMl2qUnGbO2PRWkv67RnOpDOcGc7w2u0pACKO4V/8wH62tkSa+v0rScFRREREREQ2teKcTqjNDovlqse3R8YZGs4wlM4wNlWqW2+NOhw9sIPJYlXBUUREREREZC0V5sxYrHrNDYu5fJlz6SxnhjNc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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"uG9YxYbpjgVG"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"uDTmlU-Mz0fI"},"source":["#### Activity 2: Train-Test Split\n","\n","We have to determine the effect of `YearsExperience` on income. Thus, `YearExperience` is the feature variable and `Salary` is the target variable. \n","\n","Split the dataset into training set and test set such that the training set contains 80% of the instances and the remaining instances will become the test set."]},{"cell_type":"code","metadata":{"id":"Ku_loAWZ0LXr"},"source":["# Split the DataFrame into the training and test sets.\n","x = df['YearsExperience']\n","y = df['Salary']\n","x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.33,random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hCPg7ClP0Om1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"ud8dLfCGjh0E"},"source":["#### Activity 3: Model Training\n","\n","Implement simple linear regression using `sklearn` module in the following way:\n","\n","1. Reshape the feature and the target variable arrays into two-dimensional arrays by using `reshape(-1, 1)` function of numpy module.\n","2. Deploy the model by importing the `LinearRegression` class and create an object of this class.\n","3. Call the `fit()` function on the LinearRegression object and print the slope and intercept values of the best fit line.\n"]},{"cell_type":"code","metadata":{"id":"Xost35Q1XreI","executionInfo":{"status":"ok","timestamp":1673922524747,"user_tz":360,"elapsed":199,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"622d79b3-6d8d-4de1-db9b-0c1284517c64","colab":{"base_uri":"https://localhost:8080/"}},"source":["# 1. Create two-dimensional NumPy arrays for the feature and target variables. \n","# Print the shape or dimensions of these reshaped arrays\n","x_train_reshaped = x_train.values.reshape(-1,1)\n","x_test_reshaped = x_test.values.reshape(-1, 1)\n","y_train_reshaped = y_train.values.reshape(-1,1)\n","y_test_reshaped = y_test.values.reshape(-1,1)\n","\n","print(x_train_reshaped.shape)\n","print(x_test_reshaped.shape)\n","print(y_train_reshaped.shape)\n","print(y_test_reshaped.shape)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(23, 1)\n","(12, 1)\n","(23, 1)\n","(12, 1)\n"]}]},{"cell_type":"code","metadata":{"id":"U9iIV06LXuQP","executionInfo":{"status":"ok","timestamp":1673922524748,"user_tz":360,"elapsed":24,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"824ca4c7-ff66-4de3-a60f-00ce16cd612a","colab":{"base_uri":"https://localhost:8080/"}},"source":["# 2. Deploy linear regression model using the 'sklearn.linear_model' module.\n","lin_reg = LinearRegression()\n","# Create an object of the 'LinearRegression' class.\n","\n","\n","# 3. Call the 'fit()' function\n","lin_reg.fit(x_train_reshaped, y_train_reshaped)\n","\n","# Print the slope and intercept values\n","print(f'Slope={lin_reg.coef_}, Intercept={lin_reg.intercept_}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Slope=[[8641.54265167]], Intercept=[29259.79703691]\n"]}]},{"cell_type":"markdown","metadata":{"id":"cAPgWR45mrCo"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"CvcLZdremtHY"},"source":["#### Activity 4: Model Prediction \n","\n","Predict the values for the training and test set by calling the `predict()` function on the LinearRegression object.\n","\n","Suppose you got a candidate having 15 years of experience. Calculate the best salary you should offer to him according to this prediction model.\n","\n","**Note:** We know that `sklearn.linear_model` module accepts two-dimensional arrays. To predict the salary of a person with 15 years of experience, convert `15` into 2D array and then pass it to the `predict()` function as follows:\n","\n","`predict([[15]])`"]},{"cell_type":"code","metadata":{"id":"hc3RPNgsX5-0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1673922524750,"user_tz":360,"elapsed":22,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"3ee2461f-abbc-4c30-d501-4c6d98e04b01"},"source":["# Predict the target variable values for the training and test set\n","from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n","\n","y_train_pred = lin_reg.predict(x_train_reshaped)\n","y_test_pred = lin_reg.predict(x_test_reshaped)\n","\n","print(f\"Train Set\\n{'-' * 50}\")\n","print(f\"R-squared: {r2_score(y_train_reshaped, y_train_pred):.3f}\")\n","print(f\"Mean Squared Error: {mean_squared_error(y_train_reshaped, y_train_pred):.3f}\")\n","print(f\"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_train_reshaped, y_train_pred)):.3f}\")\n","print(f\"Mean Absolute Error: {mean_absolute_error(y_train_reshaped, y_train_pred):.3f}\")\n","      \n","print(f\"\\n\\nTest Set\\n{'-' * 50}\")\n","print(f\"R-squared: {r2_score(y_test_reshaped, y_test_pred):.3f}\")\n","print(f\"Mean Squared Error: {mean_squared_error(y_test_reshaped, y_test_pred):.3f}\")\n","print(f\"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_test_reshaped, y_test_pred)):.3f}\")\n","print(f\"Mean Absolute Error: {mean_absolute_error(y_test_reshaped, y_test_pred):.3f}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Set\n","--------------------------------------------------\n","R-squared: 0.974\n","Mean Squared Error: 29396319.784\n","Root Mean Squared Error: 5421.837\n","Mean Absolute Error: 4347.760\n","\n","\n","Test Set\n","--------------------------------------------------\n","R-squared: 0.940\n","Mean Squared Error: 46147614.520\n","Root Mean Squared Error: 6793.204\n","Mean Absolute Error: 6254.426\n"]}]},{"cell_type":"code","metadata":{"id":"r7iHtQUR7GIk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1673922524750,"user_tz":360,"elapsed":16,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"5d4b70ac-6a48-4d3c-c732-eeff5bc87b4f"},"source":["# Predict salary of a person having 15 years of experience\n","pred = lin_reg.predict([[15]])\n","print(f'The predicted salary that you would get with 15 years of experience is {pred[0][0]:.2f}')\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The predicted salary that you would get with 15 years of experience is 158882.94\n"]}]},{"cell_type":"markdown","metadata":{"id":"AP3XIyvrHLK-"},"source":["**Q:** What is the best salary you can offer to the candidate having 15 years of experience?\n","\n","**A:** 158882.94"]},{"cell_type":"markdown","metadata":{"id":"0OIttGQHLCGE"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"5HqTtIiCG-El"},"source":["#### Activity 5: Residual Analysis\n","\n","Check if the error terms are normally distributed using the histogram between errors (calculated by the difference of actual and predicted values) for both training and testing data."]},{"cell_type":"code","metadata":{"id":"Dj9GkFCgDgMU","executionInfo":{"status":"ok","timestamp":1673922608665,"user_tz":360,"elapsed":1012,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"colab":{"base_uri":"https://localhost:8080/","height":351},"outputId":"872e0dd7-6f3a-414c-b2ec-7d333d883fe7"},"source":["# Create a histogram for the errors obtained in the predicted values for the train set.\n","errors_train = y_train_reshaped-y_train_pred\n","plt.figure(figsize=(15, 5))\n","plt.hist(errors_train, bins='sturges')\n","plt.axvline(x= errors_train.mean(), color='r', label = f'Mean of errors = {errors_train.mean():.3f}')\n","plt.xlabel('Trainset errors')\n","plt.legend()\n","plt.show"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(*args, **kw)>"]},"metadata":{},"execution_count":11},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"X4USXKh5IBOk"},"source":["**Q:** What is the mean of errors for the training set?\n","\n","**A:** 0\n","\n"]},{"cell_type":"markdown","metadata":{"id":"7f3v-ZO7JRz-"},"source":["**Q:** What is the mean of errors?Is it zero?\n","\n","**A:** It is 0\n"]},{"cell_type":"markdown","metadata":{"id":"Bp0p4IT-Dn_w"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"e0emIaS1Sj5n"},"source":["### Submitting the Project:\n","\n","1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>\n","\n","2. In the dialog box, make sure that '**Anyone on the Internet with this link can view**' option is selected and then click on the **Copy link** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>\n","\n","3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_Project61**) of the notebook will get copied \n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>\n","\n","4. Go to your dashboard and click on the **My Projects** option.\n","   \n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>\n","\n","5. Click on the **View Project** button for the project you want to submit.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>\n","\n","6. Click on the **Submit Project Here** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>\n","\n","7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_Project61** in the URL box and then click on the **Submit** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800> "]},{"cell_type":"markdown","metadata":{"id":"vd66-o5oSqk5"},"source":["---"]}]}