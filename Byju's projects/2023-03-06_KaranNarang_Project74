{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1oe3AGq5RqGL38DLSPSZ73Gk5VlwNpJIn","timestamp":1677552606111}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"erYQyGJOT0Ya"},"source":["### Instructions"]},{"cell_type":"markdown","metadata":{"id":"Y3MP63loT5wP"},"source":["#### Goal of the Project\n","\n","This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lessons:\n","\n"," 1. Logistic Regression - Univariate Classification I\n"," \n"," 2. Logistic Regression - Univariate Classification II\n","\n"," 3. Logistic Regression - Decision Boundary.\n"," \n","\n"," "]},{"cell_type":"markdown","metadata":{"id":"9c6PRCvhv4PR"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"1FWpfLjdvaGR"},"source":["#### Getting Started:\n","\n","1. Click on this link to open the Colab file for this project.\n","\n","   https://colab.research.google.com/drive/1oe3AGq5RqGL38DLSPSZ73Gk5VlwNpJIn\n","\n","2. Create a duplicate copy of the Colab file as described below.\n","\n","  - Click on the **File menu**. A new drop-down list will appear.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/0_file_menu.png' width=500>\n","\n","  - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/1_create_colab_duplicate_copy.png' width=500>\n","\n","3. After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_Project74** format.\n","\n","4. Now, write your code in the prescribed code cells.\n"]},{"cell_type":"markdown","metadata":{"id":"gY660g6Cvfg1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"Y8OJHhG4v5ej"},"source":["### Problem Statement\n","\n","Nowadays, social media advertising is one of the popular forms of advertising. Advertisers can utilise a user's demographic information and target their ads accordingly.\n","\n","Build a Logistic Regression model to determine whether or not a user will purchase a particular product displayed on a social network ad by analysing the impact of the age of the user.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cV6O1B17yAmf"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"7QID5cPsyBMs"},"source":["### List of Activities\n","\n","**Activity 1:** Analyse the Dataset\n","\n","  \n","**Activity 2:**  Normalise the Dataset\n","\n","**Activity 3:**  Calculate the Sigmoid Output\n","\n","**Activity 4:** Model Prediction\n","\n","**Activity 5:** Model Evaluation\n","\n","**Activity 6**: Experiment and Compare Performance With Some Threshold Values"]},{"cell_type":"markdown","metadata":{"id":"Gddd4cfWyEOa"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"OkWqRyLTyE1Z"},"source":["#### Activity 1:  Analysing the Dataset\n","\n","\n","\n","- Create a Pandas DataFrame for a **Social Network** dataset using the below link. This dataset consists of the following columns:\n","\n","|Field|Description|\n","|---:|:---|\n","|UserID|Unique ID|\n","|Gender|Male or Female|\n","|Age|Age of a person|\n","|EstimatedSalary|Salary of a person|\n","|Purchased|‘0’ or ‘1’. ‘0’ means not purchased and ‘1’ means purchased.|\n","\n","\n"," **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/social-network-ads.csv\n","\n","\n","- Print first five rows of the dataset. \n"]},{"cell_type":"code","metadata":{"id":"d8LegW1YyS3V","executionInfo":{"status":"ok","timestamp":1678156391455,"user_tz":360,"elapsed":1183,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Import the required modules and load the dataset\n","import pandas as pd\n","import numpy as np\n","df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/social-network-ads.csv')"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"XMuURFw6yZmC","executionInfo":{"status":"ok","timestamp":1678156391457,"user_tz":360,"elapsed":13,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"b228d69a-70bb-4748-f530-da5a7f000b0a","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Print first five rows of the dataframe.\n","df.head()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510    Male   19            19000          0\n","1  15810944    Male   35            20000          0\n","2  15668575  Female   26            43000          0\n","3  15603246  Female   27            57000          0\n","4  15804002    Male   19            76000          0"],"text/html":["\n","  <div id=\"df-7bd8bb11-c7a5-45e8-b73b-39bac3a284b1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>Male</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>Female</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>Female</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7bd8bb11-c7a5-45e8-b73b-39bac3a284b1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7bd8bb11-c7a5-45e8-b73b-39bac3a284b1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7bd8bb11-c7a5-45e8-b73b-39bac3a284b1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"qBZ8bgu8nInW","executionInfo":{"status":"ok","timestamp":1678156391459,"user_tz":360,"elapsed":11,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"96399726-1875-4280-9fbe-c4a3c656ee2e","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Check for null values\n","df.isnull().sum()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["User ID            0\n","Gender             0\n","Age                0\n","EstimatedSalary    0\n","Purchased          0\n","dtype: int64"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"T-bX2wLonKzU"},"source":["**Q:** Are there any missing values?\n","\n","**A:** No"]},{"cell_type":"code","metadata":{"id":"dbFRn6XBnGS8","executionInfo":{"status":"ok","timestamp":1678156392071,"user_tz":360,"elapsed":620,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"e6de2da0-7d29-4867-b5ac-f9be6fe5f74a","colab":{"base_uri":"https://localhost:8080/","height":324}},"source":["# Create a heatmap to identify the relation between attributes\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","plt.figure(figsize=(15, 5))\n","sns.heatmap(df.corr(), annot=True)\n","plt.show()"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"B6Faw5WYnf-O"},"source":["**Q:** Which attribute(s) has the strongest relationship with the `Purchased` feature? Why?\n","\n","**A:** age, because the correlation value is the highest"]},{"cell_type":"markdown","metadata":{"id":"no23D1D7yd3d"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"7RGCWGLRm0wF"},"source":["#### Activity 2:  Normalise the Dataset\n","\n"," Perform the following tasks:\n","\n"," - Get the descriptive statistics for the `Age` column.\n","\n"," - Normalise the `Are` column values by calculating their $Z$-scores (or standard scaler). \n","\n"]},{"cell_type":"code","metadata":{"id":"ZwNbJzG7noyc","executionInfo":{"status":"ok","timestamp":1678156392451,"user_tz":360,"elapsed":387,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"d61f4715-d68b-4606-ed1f-b9a20718b0ae","colab":{"base_uri":"https://localhost:8080/","height":321}},"source":["# Get the descriptive statistics for the 'Age' column. \n","df['Age'].describe()\n","# Plot a histogram to show the distribution of values for the 'Age' column. \n","plt.figure(figsize=(15, 5))\n","plt.hist(df['Age'], bins='sturges')\n","plt.show()"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"i8jUq398nyK_","executionInfo":{"status":"ok","timestamp":1678156392452,"user_tz":360,"elapsed":25,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"cd31b00b-be01-4acf-9f31-15a490cf5b0b","colab":{"base_uri":"https://localhost:8080/","height":321}},"source":["# Normalise the 'Age' column values using the standard scaler method.\n","def standard_scaler(series):\n","  new_series = (series - series.mean()) / series.std()\n","  return new_series\n","norm_age = standard_scaler(df['Age'])\n","# Get the descriptive statistics for the normalised 'Age' column. \n","norm_age.describe()\n","# Plot a histogram to show the distribution of values for the normalised 'age' column.\n","plt.figure(figsize=(15, 5))\n","plt.hist(norm_age, bins='sturges')\n","plt.show()"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"WVBOOGjuoJqO"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"4ne6b_j10JOO"},"source":["#### Activity 3:  Calculate the Sigmoid Output\n","\n","1. Create a sigmoid function. \n","\n","2.  Calculate the sigmoid output for the scaled (or Normalised) `Age` values."]},{"cell_type":"code","metadata":{"id":"byMs7DJKoYnt","executionInfo":{"status":"ok","timestamp":1678156392453,"user_tz":360,"elapsed":24,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Create a sigmoid() function using the above formula.\n","def sigmoid(series):\n","  return pd.Series(1/(1+np.exp(-series)))"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"moY-xMeLoacu","executionInfo":{"status":"ok","timestamp":1678156392453,"user_tz":360,"elapsed":23,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"ea648661-b819-4386-b05a-11c4670514cd","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Calculate the sigmoid output for the scaled (or normalised) Age values.\n","sig_age = sigmoid(norm_age)\n","\n","# Get the descriptive statistics for the sigmoid output of the normalised 'Age'. \n","sig_age.describe()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    400.000000\n","mean       0.497031\n","std        0.212792\n","min        0.132969\n","25%        0.319999\n","50%        0.484384\n","75%        0.689131\n","max        0.893934\n","Name: Age, dtype: float64"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"iwOFw0uglpXf"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"HeKSJ2kDK1sD"},"source":["#### Activity 4:  Model Prediction\n","\n","Consider the threshold probability value of 0.5. \n","\n","- Create a function that classifies the sigmoid output for the scaled  `Age` values into 0s and 1s using a threshold value of 0.5.\n"]},{"cell_type":"code","metadata":{"id":"-YHBFvoZ-1Ju","executionInfo":{"status":"ok","timestamp":1678156392454,"user_tz":360,"elapsed":19,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Create a function 'predict()' that takes the sigmoid output and the threshold\n","# and returns a Pandas series containing the predicted values (0s and 1s) as the output.\n","def predict(sigmoid, threshold): \n","  pred = [1 if output>=threshold else 0 for output in sigmoid]\n","  return pd.Series(pred)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"WvpYszOrpBBV","executionInfo":{"status":"ok","timestamp":1678156392964,"user_tz":360,"elapsed":528,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"c13544b9-942e-4707-b5ed-8f8e915f868b","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Use the 'predict()' function to classify the 'sigmoid()' function outputs as 0 and 1.\n","# Consider a threshold value of 0.5.\n","prediction = predict(sig_age, 0.5)\n","prediction"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      0\n","1      0\n","2      0\n","3      0\n","4      0\n","      ..\n","395    1\n","396    1\n","397    1\n","398    0\n","399    1\n","Length: 400, dtype: int64"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"Nx7LZFPklloT"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"Wf7G6AMyND1s"},"source":["#### Activity 5:  Model Evaluation\n","\n","Evaluate the model by calculating the number of false positives and false negatives using a confusion matrix. Also, print the classification report for the predicted values."]},{"cell_type":"code","metadata":{"id":"MujpW8MlD5JO","executionInfo":{"status":"ok","timestamp":1678156392965,"user_tz":360,"elapsed":524,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"1a9d6faf-79b8-4b8d-aba8-ca6a5e84bb44","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Create a confusion matrix for the predicted values.\n","from sklearn.metrics import classification_report, confusion_matrix\n","print(confusion_matrix(df['Purchased'], prediction))"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[[181  76]\n"," [ 29 114]]\n"]}]},{"cell_type":"code","metadata":{"id":"JxQLwQOSD9fr","executionInfo":{"status":"ok","timestamp":1678156392966,"user_tz":360,"elapsed":7,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"5f656ea2-870e-43f8-cbc9-eab95e42eb81","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Print the classification report for the predicted values.\n","print(classification_report(df['Purchased'], prediction))"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.86      0.70      0.78       257\n","           1       0.60      0.80      0.68       143\n","\n","    accuracy                           0.74       400\n","   macro avg       0.73      0.75      0.73       400\n","weighted avg       0.77      0.74      0.74       400\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"FbNcwVwsqDj-"},"source":["**Q** Write the count of f1-score for both the labels?\n","\n","**A:** 0: 0.78, 1: 0.68"]},{"cell_type":"markdown","metadata":{"id":"g1IXmbUblb2w"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"h07JSNS3dt7b"},"source":["#### Activity 6: Experiment and Compare Performance With Some Threshold Values\n","\n","Try threshold values =$[0.1,0.3,0.5,0.7,0.9]$ and compare their performance. Plot a graph to visualise. "]},{"cell_type":"code","metadata":{"id":"yD8187eqdtRl","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1678156940868,"user_tz":360,"elapsed":616,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"59fe9cd1-71b5-4605-b5a7-e6b435d9ede9"},"source":["# function to calculate accuracy\n","from sklearn.metrics import accuracy_score\n","def accuracy(pred, real_values):\n","  return accuracy_score(real_values, pred)\n","# Calculate accuracy and save it in the accuracy list\n","accuracy_list = []\n","thresholds = [0.1,0.3,0.5,0.7,0.9]\n","for i in range(len(thresholds)):\n","  accuracy_list.append(accuracy(predict(sig_age, thresholds[i]), df['Purchased']))\n","\n","# print the accuracy values\n","print(accuracy_list)\n","\n","#Plot graph to visualise the accuracy for various thresholds  \n","plt.plot(thresholds, accuracy_list)\n","  \n","# function to show the plot \n","plt.show()\n","\n"],"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.3575, 0.5675, 0.7375, 0.82, 0.6425]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"i2pV9URsd3HF"},"source":["**Q:** What are your observations for change in accuracy with respect to threshold values? Why do you think this is the case?\n","\n","**A:** \n","\n","**Reason**:"]},{"cell_type":"markdown","metadata":{"id":"JZ03820vd4u7"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lnztZ0jtd5Vr"},"source":["####  Extra challenging question\n","\n","**Q:** Please have a look at other activation function like ReLU and tanh. Also, justify your recommendation. (Try to come up with advantages and disadvantages for them when compared to sigmoid.)\n","\n","\n","\n","**A:** \n","\n","**Observations:** \n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"izxQOzGgwNU4"},"source":["### Submitting the Project:\n","\n","1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>\n","\n","2. In the dialog box, make sure that '**Anyone on the Internet with this link can view**' option is selected and then click on the **Copy link** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>\n","\n","3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_Project74**) of the notebook will get copied.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>\n","\n","4. Go to your dashboard and click on the **My Projects** option.\n","   \n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>\n","\n","5. Click on the **View Project** button for the project you want to submit.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>\n","\n","6. Click on the **Submit Project Here** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>\n","\n","7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_Project74** in the URL box and then click on the **Submit** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800> "]},{"cell_type":"markdown","metadata":{"id":"6v5LqeYuwPVn"},"source":["---"]}]}