{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1VFztldc1Q2bIfw9qUMlzPaRMgXyiIR6N","timestamp":1674417590864},{"file_id":"1wEN2Z8ov5pkaIoP2o9phr-1Vuc_ISEAH","timestamp":1602166063093},{"file_id":"1fOHp8CVHVpnhtwRgmJS0LHbqbS2PoYb8","timestamp":1601993253519},{"file_id":"1dWEN7HK_CoqLnNqGjIVQCBdBbbUb11s0","timestamp":1600868770193}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aQIDTCSIwTP3"},"source":["### Instructions"]},{"cell_type":"markdown","metadata":{"id":"F_IP6BNb3Ne1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"azReToS7wWX3"},"source":["#### Goal of the Project\n","\n","This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lesson:\n","\n"," 1. Multiple linear regression - Introduction\n"," \n"," "]},{"cell_type":"markdown","metadata":{"id":"llwKuOyIwnA_"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"qtvWTV8ihzBz"},"source":["#### Getting Started:\n","\n","1. Click on this link to open the Colab file for this project.\n","\n","  https://colab.research.google.com/drive/1VFztldc1Q2bIfw9qUMlzPaRMgXyiIR6N\n","\n","2. Create a duplicate copy of the Colab file as described below.\n","\n","  - Click on the **File menu**. A new drop-down list will appear.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/0_file_menu.png' width=500>\n","\n","  - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/1_create_colab_duplicate_copy.png' width=500>\n","\n","3. After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_Project63** format.\n","\n","4. Now, write your code in the prescribed code cells.\n"]},{"cell_type":"markdown","metadata":{"id":"fOniQDRGh9ae"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"fR_SN7K6475D"},"source":["### Problem Statement\n","\n","Many of your friends are worried about their chances of getting admission in their dream university for pursuing MS. So, you decided to help them by building a model which is capable of predicting their chance of getting admission in their dream masters program. This model will also help in understanding which factors are important in MS admissions and what are the scores required for different tests to have better admission chances.\n","\n","Build a prediction model using multiple linear regression to predict the likelihood of getting admission and evaluate the accuracy of the model.\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"lN1iCMJ4Oy1N"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"L3zN-iv-wpjm"},"source":["### List of Activities\n","\n","**Activity 1:** Analysing the Dataset\n","\n","**Activity 2:** Finding Correlation\n","  \n","**Activity 3:** Train-Test Split\n","\n","**Activity 4:**  Model Training\n","\n","**Activity 5:** Model Prediction \n","\n","**Activity 6:** Model Evaluation\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"jLudEnlPO0FF"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lZt4yKiJwrUs"},"source":["\n","#### Activity 1:  Analysing the Dataset\n","\n","- Create a Pandas DataFrame for **Admission_Predict** dataset using the below link. This dataset consists of several parameters which are considered important during the application for Masters program:\n","\n","\n","|Field|Description|\n","|---:|:---|\n","|Serial No.|Serial No.|\n","|GRE Score|GRE Scores ( out of 340 )|\n","|TOEFL Score|TOEFL Scores ( out of 120 )|\n","|University Rating|University Rating ( out of 5 )|\n","|SOP|Statement of Purpose Strength ( out of 5 )|\n","|LOR|Letter of Recommendation Strength ( out of 5 )|\n","|CGPA|Undergraduate GPA ( out of 10 )|\n","|Research|Research Experience ( either 0 or 1 )|\n","|Chance of Admit|Chance of Admit ( ranging from 0 to 1 )|\n","\n","\n","\n","  **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/Admission_Predict.csv\n","\n","- Print the first five rows of the dataset. Check for null values and treat them accordingly.\n","\n","- Also drop the column `Serial No.` from the dataset as it is of no use for analysis. Check whether the column names contain any trailing and leading spaces. If yes, remove the whitespaces from the column names.\n","\n","**Hint:** You can use `strip()` and `rename()` functions to remove unwanted whitespaces from the column name and to rename them.\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"6U6NaAy4WQgs","executionInfo":{"status":"ok","timestamp":1674525105600,"user_tz":360,"elapsed":4676,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"2cda5b27-3a30-4076-e37e-cb3eaf442b34","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Import modules\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n","# Load the dataset\n","df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/Admission_Predict.csv')\n","# Dataset Link: 'https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/Admission_Predict.csv'\n","\n","# Print first five rows using head() function\n","df.head()"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Serial No.  GRE Score  TOEFL Score  University Rating  SOP  LOR   CGPA  \\\n","0           1        337          118                  4  4.5   4.5  9.65   \n","1           2        324          107                  4  4.0   4.5  8.87   \n","2           3        316          104                  3  3.0   3.5  8.00   \n","3           4        322          110                  3  3.5   2.5  8.67   \n","4           5        314          103                  2  2.0   3.0  8.21   \n","\n","   Research  Chance of Admit   \n","0         1              0.92  \n","1         1              0.76  \n","2         1              0.72  \n","3         1              0.80  \n","4         0              0.65  "],"text/html":["\n","  <div id=\"df-68c088ca-155d-4b97-a1a3-81359726e2c8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Serial No.</th>\n","      <th>GRE Score</th>\n","      <th>TOEFL Score</th>\n","      <th>University Rating</th>\n","      <th>SOP</th>\n","      <th>LOR</th>\n","      <th>CGPA</th>\n","      <th>Research</th>\n","      <th>Chance of Admit</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>337</td>\n","      <td>118</td>\n","      <td>4</td>\n","      <td>4.5</td>\n","      <td>4.5</td>\n","      <td>9.65</td>\n","      <td>1</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>324</td>\n","      <td>107</td>\n","      <td>4</td>\n","      <td>4.0</td>\n","      <td>4.5</td>\n","      <td>8.87</td>\n","      <td>1</td>\n","      <td>0.76</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>316</td>\n","      <td>104</td>\n","      <td>3</td>\n","      <td>3.0</td>\n","      <td>3.5</td>\n","      <td>8.00</td>\n","      <td>1</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>322</td>\n","      <td>110</td>\n","      <td>3</td>\n","      <td>3.5</td>\n","      <td>2.5</td>\n","      <td>8.67</td>\n","      <td>1</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>314</td>\n","      <td>103</td>\n","      <td>2</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>8.21</td>\n","      <td>0</td>\n","      <td>0.65</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68c088ca-155d-4b97-a1a3-81359726e2c8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-68c088ca-155d-4b97-a1a3-81359726e2c8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-68c088ca-155d-4b97-a1a3-81359726e2c8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"jg7hAMJ4jKC5","executionInfo":{"status":"ok","timestamp":1674525105601,"user_tz":360,"elapsed":30,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"cad41927-4ce7-4697-db53-516006a912e2","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Check if there are any null values. If any column has null values, treat them accordingly\n","df.isnull().sum()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Serial No.           0\n","GRE Score            0\n","TOEFL Score          0\n","University Rating    0\n","SOP                  0\n","LOR                  0\n","CGPA                 0\n","Research             0\n","Chance of Admit      0\n","dtype: int64"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"v336EVVXm6iQ","executionInfo":{"status":"ok","timestamp":1674525105602,"user_tz":360,"elapsed":23,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"5bb53307-4d14-47c9-9615-71735429b2b0","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Get the list of columns of the dataset.\n","df.columns"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Serial No.', 'GRE Score', 'TOEFL Score', 'University Rating', 'SOP',\n","       'LOR ', 'CGPA', 'Research', 'Chance of Admit '],\n","      dtype='object')"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"41sLPJoVpZcr","executionInfo":{"status":"ok","timestamp":1674525105602,"user_tz":360,"elapsed":16,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"015e92be-0cab-48bd-dbbe-ee0e73e1d0b7","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Drop 'Serial No.' column from the DataFrame\n","df = df.drop('Serial No.', axis=1)\n","df.columns"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR ', 'CGPA',\n","       'Research', 'Chance of Admit '],\n","      dtype='object')"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"BY7Qw1PUocOW","executionInfo":{"status":"ok","timestamp":1674525105603,"user_tz":360,"elapsed":12,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"7701ae1a-bc61-4868-8143-107f1d8d9a94","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Remove whitespaces from both ends in the column name if there are any\n","df.rename(columns={'LOR ':'LOR', 'Chance of Admit ':'Chance of Admit'} ,inplace=True)\n","\n","# Get list of all the columns after renaming.\n","df.columns\n"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR', 'CGPA',\n","       'Research', 'Chance of Admit'],\n","      dtype='object')"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"T2b18ifmveiZ"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"x68hr50jrUO3"},"source":["#### Activity 2: Finding Correlation\n","\n","We need to predict the value of `Chance of Admit` variable, given other variables. Thus, `Chance of Admit` is the target variable and other columns except `Chance of Admit` are the feature variables.\n","\n","Find the columns that are highly correlated with the `Chance of Admit` column. For this, calculate the correlation coefficient values between all the columns and then use a heatmap to visualize these correlations."]},{"cell_type":"code","metadata":{"id":"KMt3ZmmRrcdt","executionInfo":{"status":"ok","timestamp":1674525107317,"user_tz":360,"elapsed":1723,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"b9ae2bcd-a33f-4f9f-be18-80c92e9acb34","colab":{"base_uri":"https://localhost:8080/","height":666}},"source":["# Calculate correlation coefficient for all columns of the DataFrame\n","corr = df.corr()\n","# Use heatmap to observe correlations.\n","plt.figure(figsize=(30, 15))\n","sns.heatmap(corr, annot=True)\n","plt.show()"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ha5bDa-Zr321"},"source":["**Q:** On observing the heatmap, which three scores seems most important for getting admission in an MS program?\n","\n","**A:** GRE, CCGPA, TOEFL"]},{"cell_type":"markdown","metadata":{"id":"rDrRu-PsCSxq"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"uDTmlU-Mz0fI"},"source":["#### Activity 3: Train-Test Split\n","\n","\n","Split the dataset into training set and test set such that the training set contains 70% of the instances and the remaining instances will become the test set."]},{"cell_type":"code","metadata":{"id":"Ku_loAWZ0LXr","executionInfo":{"status":"ok","timestamp":1674525107317,"user_tz":360,"elapsed":14,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Split the DataFrame into the training and test sets.\n","features_list = list(df.columns[:-1])\n","x = df[features_list]\n","y = df['Chance of Admit']\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.70, random_state=42)\n"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hCPg7ClP0Om1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"ud8dLfCGjh0E"},"source":["#### Activity 4: Model Training\n","\n","Implement multiple linear regression using `sklearn` module by creating an object of the `LinearRegression` class and calling the `fit()` function.\n","\n","**Note:** Reshaping the target variable array into a 2D array is not mandatory in multiple linear regression. You can skip that."]},{"cell_type":"code","metadata":{"id":"Xost35Q1XreI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674525301313,"user_tz":360,"elapsed":185,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"601fadac-a192-4132-ae75-d16a7de9525e"},"source":["# Build linear regression model\n","model = LinearRegression()\n","model.fit(x_train, y_train)\n","# Print the value of the intercept \n","print(model.intercept_)\n","slope = model.coef_\n","\n","# Print the names of the features along with the values of their corresponding coefficients.\n","print('names of the features along with the values of their corresponding coefficients')\n","for i in range(len(features_list)):\n","  print('='*79)\n","  print(features_list[i], slope[i])\n"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["-1.545154862611521\n","names of the features along with the values of their corresponding coefficients\n","===============================================================================\n","GRE Score 0.0035923040091783297\n","===============================================================================\n","TOEFL Score 0.0007541019416919519\n","===============================================================================\n","University Rating 0.012978466314949413\n","===============================================================================\n","SOP -0.003937622261475535\n","===============================================================================\n","LOR 0.018445114949441625\n","===============================================================================\n","CGPA 0.11153383027814524\n","===============================================================================\n","Research 0.00907990086768865\n"]}]},{"cell_type":"markdown","metadata":{"id":"cAPgWR45mrCo"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"CvcLZdremtHY"},"source":["#### Activity 5: Model Prediction using Test Set\n","\n","Predict the values for the test set by calling the `predict()` function on the LinearRegression object. \n","\n","Also, predict your friend's chances of getting admission into his dream university with a GRE score of 350, TOEFL score of 115, University Rating of 3, SOP of score 3, 3 LORs, CGPA of 9.8 and having research papers.\n","\n","**Note:** Pass the values of all feature variables to the `predict()` function in the form of a 2D array as follows:\n","\n","`predict([[350, 115, 3, 3, 3, 9.8, 1]])`"]},{"cell_type":"code","metadata":{"id":"nktWlDysyJyR","executionInfo":{"status":"ok","timestamp":1674525487204,"user_tz":360,"elapsed":152,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Predict the target variable values for test set\n","y_test_pred = model.predict(x_test)"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"id":"cpPQ-yLkMMUb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674525390424,"user_tz":360,"elapsed":133,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"7c5586df-5fde-4389-e757-22c2c19b0f89"},"source":["# Make new prediction for your friend\n","y_pred = model.predict([[350, 115, 3, 3, 3, 9.8, 1]])\n","print(y_pred)"],"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.98344258]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","metadata":{"id":"JiUWe--2Bliw"},"source":["**Q:** How much is your friend's chance of getting admission for MS?\n","\n","**A:** 0.98344258"]},{"cell_type":"markdown","metadata":{"id":"hspzRER4CHcc"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"ThJQ-K4d-jeH"},"source":["#### Activity 6: Model Evaluation\n","\n","Calculate the $R^2$, MSE, RMSE and MAE values for the test set to evaluate the accuracy of your model."]},{"cell_type":"code","metadata":{"id":"hc3RPNgsX5-0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674525500870,"user_tz":360,"elapsed":136,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"e3b8dbd7-7de7-438c-f711-8a7dafb2869f"},"source":["# Evaluate the model using the 'r2_score', 'mean_squared_error' & 'mean_absolute_error' functions of the 'sklearn' module for the test set.\n","print(f\"Test Set\\n{'-' * 50}\")\n","print(f\"R-squared: {r2_score(y_test, y_test):.3f}\")\n","print(f\"Mean Squared Error: {mean_squared_error(y_test, y_test_pred):.3f}\")\n","print(f\"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_test, y_test_pred)):.3f}\")\n","print(f\"Mean Absolute Error: {mean_absolute_error(y_test, y_test_pred):.3f}\")"],"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Set\n","--------------------------------------------------\n","R-squared: 1.000\n","Mean Squared Error: 0.005\n","Root Mean Squared Error: 0.068\n","Mean Absolute Error: 0.049\n"]}]},{"cell_type":"markdown","metadata":{"id":"Bp0p4IT-Dn_w"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"y95yVxG1iAnq"},"source":["### Submitting the Project:\n","\n","1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>\n","\n","2. In the dialog box, make sure that '**Anyone on the Internet with this link can view**' option is selected and then click on the **Copy link** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>\n","\n","3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_Project63**) of the notebook will get copied \n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>\n","\n","4. Go to your dashboard and click on the **My Projects** option.\n","   \n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>\n","\n","5. Click on the **View Project** button for the project you want to submit.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>\n","\n","6. Click on the **Submit Project Here** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>\n","\n","7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_Project63** in the URL box and then click on the **Submit** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800> "]},{"cell_type":"markdown","metadata":{"id":"clGBoHppiK8R"},"source":["---"]}]}