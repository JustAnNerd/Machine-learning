{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17usPH3PAJ7uBggEMReXQdVkrVJZaxaXU","timestamp":1676332721003},{"file_id":"1eBswyz2ZiX0wjU6cxIsysKCu8Qd3v79w","timestamp":1604398881101},{"file_id":"13Et8qUJwprAWmWBCCtNnKjUsIiEBcAL4","timestamp":1604390880034}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aQIDTCSIwTP3"},"source":["### Instructions"]},{"cell_type":"markdown","metadata":{"id":"F_IP6BNb3Ne1"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"azReToS7wWX3"},"source":["#### Goal of the Project\n","\n","This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lessons:\n","\n"," 1. Multiple linear regression - Introduction\n"," 2. Car Prediction - Data exploration\n"," \n"," \n"," "]},{"cell_type":"markdown","metadata":{"id":"llwKuOyIwnA_"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"2YmolOcb9uGe"},"source":["#### Getting Started:\n","\n","1. Click on this link to open the Colab file for this project.\n","\n","  https://colab.research.google.com/drive/17usPH3PAJ7uBggEMReXQdVkrVJZaxaXU\n","  \n","2. Create a duplicate copy of the Colab file as described below.\n","\n","  - Click on the **File menu**. A new drop-down list will appear.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/0_file_menu.png' width=500>\n","\n","  - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/lesson-0/1_create_colab_duplicate_copy.png' width=500>\n","\n","3. After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_Project68** format.\n","\n","4. Now, write your code in the prescribed code cells.\n"]},{"cell_type":"markdown","metadata":{"id":"hm0j0vZH9xmV"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"fR_SN7K6475D"},"source":["### Problem Statement\n","\n","The most important factor for an Insurance Company is to determine what premium charges must be paid by an individual. The charges depend on various factors like age, gender, income, etc. \n","\n","Build a model that is capable of predicting the insurance charges a person has to pay depending on the given features using multiple linear regression. "]},{"cell_type":"markdown","metadata":{"id":"lN1iCMJ4Oy1N"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"L3zN-iv-wpjm"},"source":["### List of Activities\n"," \n","**Activity 1:** Analysing the Dataset\n","\n","**Activity 2:** Feature Encoding\n","\n","**Activity 3:** Exploratory Data Analysis\n","\n","**Activity 4:** Train-Test Split\n"," \n","**Activity 5:** Model Training using `statsmodels.api`\n","\n","\n","\n"," \n"]},{"cell_type":"markdown","metadata":{"id":"jLudEnlPO0FF"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lZt4yKiJwrUs"},"source":["\n","#### Activity 1:  Analysing the Dataset\n","\n","- Create a Pandas DataFrame for **Insurance** dataset using the below link. This dataset consists of following columns:\n","\n","|Field|Description|\n","|---:|:---|\n","|age|Age of primary beneficiary|\n","|sex|Insurance contractor gender, female or male|\n","|bmi|Body mass index|\n","|children|Number of children covered by health insurance/number of dependents|\n","|region|Beneficiary's residential area in the US, northeast, southeast, southwest, northwest|\n","|charges|Individual medical costs billed by health insurance|\n","\n","\n","  **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/insurance_dataset.csv\n","\n","- Print the first five rows of the dataset. Check for null values and treat them accordingly.\n","\n","- Create a regression plot with `age` on X-axis and `charges` on Y-axis to identify the relationship between these two attributes.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"6U6NaAy4WQgs","executionInfo":{"status":"ok","timestamp":1676504783181,"user_tz":360,"elapsed":3961,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"31bdd426-6083-4125-b47d-83831ca3037e","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Import modules\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n","import statsmodels.api as sm\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n","import warnings\n","# Load the dataset\n","df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/insurance_dataset.csv')\n","# Print first five rows using head() function\n","df.head()"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     sex     bmi  children     region      charges\n","0   18    male  33.770         1  southeast   1725.55230\n","1   28    male  33.000         3  southeast   4449.46200\n","2   33    male  22.705         0  northwest  21984.47061\n","3   32    male  28.880         0  northwest   3866.85520\n","4   31  female  25.740         0  southeast   3756.62160"],"text/html":["\n","  <div id=\"df-1151271c-b84b-4a23-8df4-33d49904d821\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>31</td>\n","      <td>female</td>\n","      <td>25.740</td>\n","      <td>0</td>\n","      <td>southeast</td>\n","      <td>3756.62160</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1151271c-b84b-4a23-8df4-33d49904d821')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1151271c-b84b-4a23-8df4-33d49904d821 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1151271c-b84b-4a23-8df4-33d49904d821');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"jg7hAMJ4jKC5","executionInfo":{"status":"ok","timestamp":1676504783182,"user_tz":360,"elapsed":31,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"784e5f8a-e65e-439c-a88a-716a62418d66","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Check if there are any null values. If any column has null values, treat them accordingly\n","df.isnull().sum()"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age         0\n","sex         0\n","bmi         0\n","children    0\n","region      0\n","charges     0\n","dtype: int64"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"ixNcqn5UBcwt","executionInfo":{"status":"ok","timestamp":1676504783183,"user_tz":360,"elapsed":26,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"cef0b373-efd8-4e79-b836-2e470be1e423","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Print the information about the dataset\n","df.info()"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1064 entries, 0 to 1063\n","Data columns (total 6 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   age       1064 non-null   int64  \n"," 1   sex       1064 non-null   object \n"," 2   bmi       1064 non-null   float64\n"," 3   children  1064 non-null   int64  \n"," 4   region    1064 non-null   object \n"," 5   charges   1064 non-null   float64\n","dtypes: float64(2), int64(2), object(2)\n","memory usage: 50.0+ KB\n"]}]},{"cell_type":"markdown","metadata":{"id":"2BDQniyBzlTk"},"source":["----"]},{"cell_type":"markdown","metadata":{"id":"FA5J-y1wzmmb"},"source":["#### Activity 2 : Feature Encoding\n","\n","The `sex` and `region` columns are categorical attributes. Convert these attributes into numerical ones so that they can be used for linear regression analysis using `map()` function. \n","\n","- Map the following values for the `sex` column:\n","\n","  - `male` to `0`\n","  - `female` to `1`\n","\n","- Map the following values for the `region` column:\n","\n"," - `southeast` to `1`\n"," - `southwest` to `2`\n"," - `northeast` to `3`\n"," - `northwest` to `4`\n"]},{"cell_type":"code","metadata":{"id":"1IUaNIbw0Gh9","executionInfo":{"status":"ok","timestamp":1676504783184,"user_tz":360,"elapsed":24,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"04b28797-028d-4ee0-ef00-4608cba5b7af","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Count the occurrence of each value in the 'sex' column.\n","df['sex'].value_counts()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["female    547\n","male      517\n","Name: sex, dtype: int64"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"_2c_ds7907ph","executionInfo":{"status":"ok","timestamp":1676504783186,"user_tz":360,"elapsed":24,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Use the 'map()' function to replace values in 'sex' column to their corresponding numeric values.\n","df['sex']=df['sex'].map({'male':0,'female':1})"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"TjUJOLl91rgf","executionInfo":{"status":"ok","timestamp":1676504783187,"user_tz":360,"elapsed":25,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"b306dfb4-3915-4ee2-d05f-0dbe5500b7e9","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Again count the occurrence of each value in the 'sex' column to verify whether all values are correctly mapped\n","df['sex'].value_counts()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    547\n","0    517\n","Name: sex, dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"YFlYUSlr1462","executionInfo":{"status":"ok","timestamp":1676504783188,"user_tz":360,"elapsed":21,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"1c4cae06-13b5-4bcf-ed31-20bf64f2dcb6","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Count the occurrence of each value in the 'region' column.\n","df['region'].value_counts()"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["southeast    273\n","northwest    267\n","southwest    267\n","northeast    257\n","Name: region, dtype: int64"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"lK-Hi9xl2QPH","executionInfo":{"status":"ok","timestamp":1676504783681,"user_tz":360,"elapsed":509,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Use the 'map()' function to replace a value in the 'region' column to their corresponding numeric values.\n","df['region']=df['region'].map({'southeast':0,'northeast':1, 'southwest':2, 'northeast':3})"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cj86TrR82QPS","executionInfo":{"status":"ok","timestamp":1676504783681,"user_tz":360,"elapsed":4,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"7c32eb22-7752-4faf-8779-e827805a41a8","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Again count the occurrence of each value in the 'region' column to verify whether all values are correctly mapped\n","df['region'].value_counts"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method IndexOpsMixin.value_counts of 0       0.0\n","1       0.0\n","2       NaN\n","3       NaN\n","4       0.0\n","       ... \n","1059    2.0\n","1060    NaN\n","1061    3.0\n","1062    0.0\n","1063    2.0\n","Name: region, Length: 1064, dtype: float64>"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"Z5oGrPHV0VDu"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"qqG2ooNsKHlA"},"source":["#### Activity 3: Exploratory Data Analysis\n","\n","\n","Create the heat-map to look into the correlation of the features"]},{"cell_type":"code","metadata":{"id":"4qmyNiuSOMRW","executionInfo":{"status":"ok","timestamp":1676504784575,"user_tz":360,"elapsed":896,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"40ef5156-0d99-408a-bc98-9834a89f0688","colab":{"base_uri":"https://localhost:8080/","height":324}},"source":["# Draw a correlation heatmap between the features.\n","plt.figure(figsize=(15,5))\n","sns.heatmap(df.corr(),annot=True)\n","plt.show()"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"cfLOeRHz4EpJ"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"FZe5uj2sFsmt"},"source":["#### Activity 4: Train-Test Split\n","\n","\n","Split the dataset into training set and test set such that the training set contains 67% of the instances and the remaining instances will become the test set and keep the `charges` as the target variables."]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"mCyE_4gnMXig","executionInfo":{"status":"ok","timestamp":1676504784576,"user_tz":360,"elapsed":17,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"49fa5f55-d8f9-45f9-fca9-bfa8d76b20a6","colab":{"base_uri":"https://localhost:8080/","height":206}},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age  sex     bmi  children  region      charges\n","0   18    0  33.770         1     0.0   1725.55230\n","1   28    0  33.000         3     0.0   4449.46200\n","2   33    0  22.705         0     NaN  21984.47061\n","3   32    0  28.880         0     NaN   3866.85520\n","4   31    1  25.740         0     0.0   3756.62160"],"text/html":["\n","  <div id=\"df-a4bfbe0f-2c96-4715-bdc2-498efa733d7e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28</td>\n","      <td>0</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>0</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>32</td>\n","      <td>0</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>3866.85520</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>31</td>\n","      <td>1</td>\n","      <td>25.740</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>3756.62160</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4bfbe0f-2c96-4715-bdc2-498efa733d7e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a4bfbe0f-2c96-4715-bdc2-498efa733d7e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a4bfbe0f-2c96-4715-bdc2-498efa733d7e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"a1cyzv_TgcOx","executionInfo":{"status":"ok","timestamp":1676504784577,"user_tz":360,"elapsed":15,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Split the 'df' Dataframe into the train and test sets.\n","train_df,test_df=train_test_split(df,test_size=0.67,random_state=42)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"u_dZ28wcNhiM","executionInfo":{"status":"ok","timestamp":1676504784577,"user_tz":360,"elapsed":15,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Create separate data-frames for the feature and target variables for both the train and test sets.\n","features = list(df.columns)\n","features.remove('charges')\n","x_train = train_df[features]\n","x_test = test_df[features]\n","y_train = train_df['charges']\n","y_test = test_df['charges']"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NSmN2VEa4d-3"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"u7bWq9hZHikZ"},"source":["#### Activity 5: Model Training using `statsmodels.api`\n","\n","Now build a multiple linear regression model using the `statsmodels.api` module.\n","Also, print the summary of the linear regression model built."]},{"cell_type":"code","metadata":{"id":"mAAdCmH5g3iQ","executionInfo":{"status":"error","timestamp":1676504785165,"user_tz":360,"elapsed":602,"user":{"displayName":"Karan","userId":"08865303078637944641"}},"outputId":"94dd2ba4-d1d7-45ca-8790-5af8b7ac572f","colab":{"base_uri":"https://localhost:8080/","height":436}},"source":["#  Build a linear regression model using all the features to predict insurance charges.\n","import statsmodels.api as sm\n","x_train_sm = sm.add_constant(x_train)\n","linreg = sm.OLS(y_train, y_train).fit()\n","print(linreg.summary())"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n","  x = pd.concat(x[::order], 1)\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-176193bad41a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mx_train_sm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_constant\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mlinreg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOLS\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train_sm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlinreg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/statsmodels/regression/linear_model.py\u001b[0m in \u001b[0;36msummary\u001b[0;34m(self, yname, xname, title, alpha)\u001b[0m\n\u001b[1;32m   2638\u001b[0m         \u001b[0mrsquared_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m''\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mk_constant\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m' (uncentered)'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2639\u001b[0m         top_right = [('R-squared' + rsquared_type + ':',\n\u001b[0;32m-> 2640\u001b[0;31m                       [\"%#8.3f\" % self.rsquared]),\n\u001b[0m\u001b[1;32m   2641\u001b[0m                      ('Adj. R-squared' + rsquared_type + ':',\n\u001b[1;32m   2642\u001b[0m                       [\"%#8.3f\" % self.rsquared_adj]),\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/properties.pyx\u001b[0m in \u001b[0;36mpandas._libs.properties.CachedProperty.__get__\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/statsmodels/regression/linear_model.py\u001b[0m in \u001b[0;36mrsquared\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1715\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mssr\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcentered_tss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1716\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1717\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mssr\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muncentered_tss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1718\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1719\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mcache_readonly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/properties.pyx\u001b[0m in \u001b[0;36mpandas._libs.properties.CachedProperty.__get__\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/statsmodels/regression/linear_model.py\u001b[0m in \u001b[0;36mssr\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1654\u001b[0m         \u001b[0;34m\"\"\"Sum of squared (whitened) residuals.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1655\u001b[0m         \u001b[0mwresid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwresid\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1656\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwresid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwresid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1657\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1658\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mcache_readonly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: shapes (351,6) and (351,6) not aligned: 6 (dim 1) != 351 (dim 0)"]}]},{"cell_type":"code","metadata":{"id":"rrD285FNg551","executionInfo":{"status":"aborted","timestamp":1676504785166,"user_tz":360,"elapsed":11,"user":{"displayName":"Karan","userId":"08865303078637944641"}}},"source":["# Print the summary of the linear regression report.\n","print(linreg.summary)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FoZY5rNpHzf1"},"source":["\n","\n","\n","**Q:** What is the $R^2$ value?\n","\n","**A:** \n","\n","\n","**Q:** Is there multicollinearity in the model?\n","\n","**A:** \n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"uG9YxYbpjgVG"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"3S8H-bJE-DDe"},"source":["### Submitting the Project:\n","\n","1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>\n","\n","2. In the dialog box, make sure that '**Anyone on the Internet with this link can view**' option is selected and then click on the **Copy link** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>\n","\n","3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_Project68**) of the notebook will get copied \n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>\n","\n","4. Go to your dashboard and click on the **My Projects** option.\n","   \n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>\n","\n","  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>\n","\n","5. Click on the **View Project** button for the project you want to submit.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>\n","\n","6. Click on the **Submit Project Here** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>\n","\n","7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_Project68** in the URL box and then click on the **Submit** button.\n","\n","   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800> "]},{"cell_type":"markdown","metadata":{"id":"T53-g6P7-Jbn"},"source":["---"]}]}